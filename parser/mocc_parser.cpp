#define YY_MCC_Parser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from parser/mocc.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS

#line 1 "/usr/share/bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "/usr/share/bison++/bison.cc"
#define YY_MCC_Parser_YY_MCC_Parser_DEBUG  
#define YY_MCC_Parser_CONSTRUCTOR_PARAM  bool debug
#define YY_MCC_Parser_CONSTRUCTOR_CODE  \
  parsing_subscript = false;\
  yydebug=debug;\
  lexer = new MCC_Lexer();\
  lexer->setParser(this);
#define YY_MCC_Parser_DESSTRUCTOR_CODE  \
  delete lexer;\
  lexer = NULL;
#line 17 "parser/mocc.y"

#include <FlexLexer.h>
#include <string.h>
#include <ast/ast_builder.h>

class MCC_Lexer: public yyFlexLexer {
public:
  int yyinput() { return yyFlexLexer::yyinput(); };
  int lineno() { return yyFlexLexer::lineno(); };
  void setInput(std::istream* in) { yyin = in; };
  MCC_Parser *parser() { return _p; };
  void setParser (MCC_Parser *p) { _p= p; }
private:
  MCC_Parser *_p;
};
#define YY_MCC_Parser_LSP_NEEDED 
#define YY_MCC_Parser_MEMBERS  \
          virtual ~MCC_Parser() {} \
          int gettoken() { return lexer->yylex(); };   \
          int yyinput() { return lexer->yyinput(); };   \
          static int lineno() { if (lexer==NULL) return 0; return lexer->lineno(); };    \
          int parseFile(std::istream* in) { lexer->setInput(in); return yyparse(); };    \
          void setParsingSubscript() { parsing_subscript=true; } \
          void unsetParsingSubscript() { parsing_subscript=false; } \
          bool isParsingSubscript() { return parsing_subscript; } \
          AST_StoredDefinition root() { return _root; }\
          void setRoot(AST_StoredDefinition sd) { _root=sd; }\
          private: \
                static MCC_Lexer *lexer; \
                bool parsing_subscript;\
                AST_StoredDefinition _root;
#define YY_MCC_Parser_LEX_BODY  { return lexer->yylex();}
#define YY_MCC_Parser_ERROR_BODY  { cerr << "error encountered at line: "<<lexer->lineno()<<" last word parsed:"<<lexer->YYText()<<"\n";}

#line 61 "parser/mocc.y"
typedef union {
  AST_Boolean                           opt;
  AST_Real                              real;
  AST_Integer                           integer;
  AST_String                            string;

  AST_Argument                          argument;
  AST_ClassPrefix                       class_prefix;
  AST_Class                             model;
  AST_Comment                           comment;
  AST_Element_Component                         component;
  AST_Composition                       composition;
  AST_CompositionEqsAlgs                composition_eqs_algs;
  AST_CompositionElement                composition_element;
  AST_Declaration                       declaration;
  AST_Equation                          equation;
  AST_Expression                        expression;
  AST_Expression_ComponentReference     component_ref;
  AST_External_Function_Call            external_funciton_call;
  AST_Element                           element;
  AST_Element_ExtendsClause             extends_clause;
  AST_ForIndex                          for_index;
  AST_Element_ImportClause              import_clause;
  AST_Modification                      modification;
  AST_ShortClassExp                     short_class_exp;
  AST_Statement                         statement;
  AST_StoredDefinition                  stored_def;
  AST_TypePrefix                        type_prefix;

  AST_ArgumentList                      argument_list;
  AST_ClassList                         class_list;
  AST_CompositionElementList            composition_element_list;
  AST_Element_ComponentList                     component_list;
  AST_DeclarationList                   declaration_list;
  AST_ElementList                       element_list;
  AST_EquationList                      equation_list;
  AST_Equation_ElseList                 equation_elselist;
  AST_ExpressionList                    expression_list;
  AST_ExpressionListList                expression_list_list;
  AST_ForIndexList                      for_index_list;
  AST_StatementList                     statement_list;
  AST_Statement_ElseList                statement_elselist;
  AST_StringList                        string_list;
} yy_MCC_Parser_stype;
#define YY_MCC_Parser_STYPE yy_MCC_Parser_stype

#line 88 "/usr/share/bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_MCC_Parser_BISON 1

#ifndef YY_MCC_Parser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_MCC_Parser_COMPATIBILITY 1
 #else
  #define  YY_MCC_Parser_COMPATIBILITY 0
 #endif
#endif

#if YY_MCC_Parser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_MCC_Parser_LTYPE
   #define YY_MCC_Parser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_MCC_Parser_STYPE 
   #define YY_MCC_Parser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_MCC_Parser_DEBUG
   #define  YY_MCC_Parser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_MCC_Parser_USE_GOTO
  #define YY_MCC_Parser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_MCC_Parser_USE_GOTO
 #define YY_MCC_Parser_USE_GOTO 0
#endif

#ifndef YY_MCC_Parser_PURE

 #line 130 "/usr/share/bison++/bison.cc"

#line 130 "/usr/share/bison++/bison.cc"
/*  YY_MCC_Parser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "/usr/share/bison++/bison.cc"

#line 134 "/usr/share/bison++/bison.cc"
/* prefix */
#ifndef YY_MCC_Parser_DEBUG

 #line 136 "/usr/share/bison++/bison.cc"
#define YY_MCC_Parser_DEBUG 1

#line 136 "/usr/share/bison++/bison.cc"
/* YY_MCC_Parser_DEBUG */
#endif


#ifndef YY_MCC_Parser_LSP_NEEDED

 #line 141 "/usr/share/bison++/bison.cc"

#line 141 "/usr/share/bison++/bison.cc"
 /* YY_MCC_Parser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_MCC_Parser_LSP_NEEDED
#ifndef YY_MCC_Parser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_MCC_Parser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_MCC_Parser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_MCC_Parser_STYPE
#define YY_MCC_Parser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_MCC_Parser_PARSE
#define YY_MCC_Parser_PARSE yyparse
#endif
#ifndef YY_MCC_Parser_LEX
#define YY_MCC_Parser_LEX yylex
#endif
#ifndef YY_MCC_Parser_LVAL
#define YY_MCC_Parser_LVAL yylval
#endif
#ifndef YY_MCC_Parser_LLOC
#define YY_MCC_Parser_LLOC yylloc
#endif
#ifndef YY_MCC_Parser_CHAR
#define YY_MCC_Parser_CHAR yychar
#endif
#ifndef YY_MCC_Parser_NERRS
#define YY_MCC_Parser_NERRS yynerrs
#endif
#ifndef YY_MCC_Parser_DEBUG_FLAG
#define YY_MCC_Parser_DEBUG_FLAG yydebug
#endif
#ifndef YY_MCC_Parser_ERROR
#define YY_MCC_Parser_ERROR yyerror
#endif

#ifndef YY_MCC_Parser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_MCC_Parser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_MCC_Parser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_MCC_Parser_PARSE_PARAM
  #define YY_MCC_Parser_PARSE_PARAM void
 #endif
#endif

#if YY_MCC_Parser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_MCC_Parser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_MCC_Parser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_MCC_Parser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_MCC_Parser_PURE
#  ifndef YYPURE
#    define YYPURE YY_MCC_Parser_PURE
#  endif
#endif

#ifdef YY_MCC_Parser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_MCC_Parser_DEBUG 
#  endif
#endif

#ifndef YY_MCC_Parser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_MCC_Parser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_MCC_Parser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_MCC_Parser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "/usr/share/bison++/bison.cc"
#define	TOKALGORITHM	258
#define	TOKAND	259
#define	TOKANNOTATION	260
#define	TOKBLOCK	261
#define	TOKBREAK	262
#define	TOKCLASS	263
#define	TOKCONNECT	264
#define	TOKCONNECTOR	265
#define	TOKCONSTANT	266
#define	TOKCONSTRAINEDBY	267
#define	TOKDER	268
#define	TOKDISCRETE	269
#define	TOKEACH	270
#define	TOKELSE	271
#define	TOKELSEIF	272
#define	TOKELSEWHEN	273
#define	TOKENCAPSULATED	274
#define	TOKEND	275
#define	TOKENUMERATION	276
#define	TOKEQUATION	277
#define	TOKEXPANDABLE	278
#define	TOKEXTENDS	279
#define	TOKEXTERNAL	280
#define	TOKFALSE	281
#define	TOKFINAL	282
#define	TOKFLOW	283
#define	TOKFOR	284
#define	TOKFUNCTION	285
#define	TOKIF	286
#define	TOKIMPORT	287
#define	TOKIMPURE	288
#define	TOKIN	289
#define	TOKINITIAL	290
#define	TOKINNER	291
#define	TOKINPUT	292
#define	TOKLOOP	293
#define	TOKMODEL	294
#define	TOKOPERATOR	295
#define	TOKOR	296
#define	TOKOUTER	297
#define	TOKOUTPUT	298
#define	TOKPACKAGE	299
#define	TOKPARAMETER	300
#define	TOKPARTIAL	301
#define	TOKPROTECTED	302
#define	TOKPUBLIC	303
#define	TOKPURE	304
#define	TOKRECORD	305
#define	TOKREDECLARE	306
#define	TOKREPLACEABLE	307
#define	TOKRETURN	308
#define	TOKSTREAM	309
#define	TOKTHEN	310
#define	TOKTRUE	311
#define	TOKTYPE	312
#define	TOKWHEN	313
#define	TOKWHILE	314
#define	TOKWITHIN	315
#define	TOKINITIALEQ	316
#define	TOKINITIALALG	317
#define	TOKENDSUB	318
#define	TOKSEMICOLON	319
#define	TOKCOMA	320
#define	TOKCARET	321
#define	TOKOPAREN	322
#define	TOKCPAREN	323
#define	TOKOBRACE	324
#define	TOKCBRACE	325
#define	TOKOBRACKET	326
#define	TOKCBRACKET	327
#define	TOKDOT	328
#define	TOKINT	329
#define	TOKFLOAT	330
#define	TOKSTRING	331
#define	TOKID	332
#define	TOKASSING	333
#define	TOKEQUAL	334
#define	TOKCOLON	335
#define	TOKNOT	336
#define	TOKLOWER	337
#define	TOKGREATER	338
#define	TOKLOWEREQ	339
#define	TOKGREATEREQ	340
#define	TOKCOMPEQ	341
#define	TOKCOMPNE	342
#define	TOKPLUS	343
#define	TOKDOTPLUS	344
#define	TOKMINUS	345
#define	TOKDOTMINUS	346
#define	TOKUMINUS	347
#define	TOKUPLUS	348
#define	TOKSLASH	349
#define	TOKDOTSLASH	350
#define	TOKSTAR	351
#define	TOKDOTSTAR	352
#define	TOKDOTCARET	353
#define	TOKFC	354
#define	TOKPARENS	355


#line 263 "/usr/share/bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_MCC_Parser_CLASS
#define YY_MCC_Parser_CLASS MCC_Parser
#endif
#ifndef YY_MCC_Parser_INHERIT
#define YY_MCC_Parser_INHERIT
#endif
#ifndef YY_MCC_Parser_MEMBERS
#define YY_MCC_Parser_MEMBERS 
#endif
#ifndef YY_MCC_Parser_LEX_BODY
#define YY_MCC_Parser_LEX_BODY  
#endif
#ifndef YY_MCC_Parser_ERROR_BODY
#define YY_MCC_Parser_ERROR_BODY  
#endif
#ifndef YY_MCC_Parser_CONSTRUCTOR_PARAM
#define YY_MCC_Parser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_MCC_Parser_CONSTRUCTOR_CODE
#define YY_MCC_Parser_CONSTRUCTOR_CODE
#endif
#ifndef YY_MCC_Parser_CONSTRUCTOR_INIT
#define YY_MCC_Parser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_MCC_Parser_USE_CONST_TOKEN
#define YY_MCC_Parser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_MCC_Parser_USE_CONST_TOKEN != 0
#ifndef YY_MCC_Parser_ENUM_TOKEN
#define YY_MCC_Parser_ENUM_TOKEN yy_MCC_Parser_enum_token
#endif
#endif

class YY_MCC_Parser_CLASS YY_MCC_Parser_INHERIT
{
public: 
#if YY_MCC_Parser_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "/usr/share/bison++/bison.cc"
static const int TOKALGORITHM;
static const int TOKAND;
static const int TOKANNOTATION;
static const int TOKBLOCK;
static const int TOKBREAK;
static const int TOKCLASS;
static const int TOKCONNECT;
static const int TOKCONNECTOR;
static const int TOKCONSTANT;
static const int TOKCONSTRAINEDBY;
static const int TOKDER;
static const int TOKDISCRETE;
static const int TOKEACH;
static const int TOKELSE;
static const int TOKELSEIF;
static const int TOKELSEWHEN;
static const int TOKENCAPSULATED;
static const int TOKEND;
static const int TOKENUMERATION;
static const int TOKEQUATION;
static const int TOKEXPANDABLE;
static const int TOKEXTENDS;
static const int TOKEXTERNAL;
static const int TOKFALSE;
static const int TOKFINAL;
static const int TOKFLOW;
static const int TOKFOR;
static const int TOKFUNCTION;
static const int TOKIF;
static const int TOKIMPORT;
static const int TOKIMPURE;
static const int TOKIN;
static const int TOKINITIAL;
static const int TOKINNER;
static const int TOKINPUT;
static const int TOKLOOP;
static const int TOKMODEL;
static const int TOKOPERATOR;
static const int TOKOR;
static const int TOKOUTER;
static const int TOKOUTPUT;
static const int TOKPACKAGE;
static const int TOKPARAMETER;
static const int TOKPARTIAL;
static const int TOKPROTECTED;
static const int TOKPUBLIC;
static const int TOKPURE;
static const int TOKRECORD;
static const int TOKREDECLARE;
static const int TOKREPLACEABLE;
static const int TOKRETURN;
static const int TOKSTREAM;
static const int TOKTHEN;
static const int TOKTRUE;
static const int TOKTYPE;
static const int TOKWHEN;
static const int TOKWHILE;
static const int TOKWITHIN;
static const int TOKINITIALEQ;
static const int TOKINITIALALG;
static const int TOKENDSUB;
static const int TOKSEMICOLON;
static const int TOKCOMA;
static const int TOKCARET;
static const int TOKOPAREN;
static const int TOKCPAREN;
static const int TOKOBRACE;
static const int TOKCBRACE;
static const int TOKOBRACKET;
static const int TOKCBRACKET;
static const int TOKDOT;
static const int TOKINT;
static const int TOKFLOAT;
static const int TOKSTRING;
static const int TOKID;
static const int TOKASSING;
static const int TOKEQUAL;
static const int TOKCOLON;
static const int TOKNOT;
static const int TOKLOWER;
static const int TOKGREATER;
static const int TOKLOWEREQ;
static const int TOKGREATEREQ;
static const int TOKCOMPEQ;
static const int TOKCOMPNE;
static const int TOKPLUS;
static const int TOKDOTPLUS;
static const int TOKMINUS;
static const int TOKDOTMINUS;
static const int TOKUMINUS;
static const int TOKUPLUS;
static const int TOKSLASH;
static const int TOKDOTSLASH;
static const int TOKSTAR;
static const int TOKDOTSTAR;
static const int TOKDOTCARET;
static const int TOKFC;
static const int TOKPARENS;


#line 307 "/usr/share/bison++/bison.cc"
 /* decl const */
#else
enum YY_MCC_Parser_ENUM_TOKEN { YY_MCC_Parser_NULL_TOKEN=0

 #line 310 "/usr/share/bison++/bison.cc"
	,TOKALGORITHM=258
	,TOKAND=259
	,TOKANNOTATION=260
	,TOKBLOCK=261
	,TOKBREAK=262
	,TOKCLASS=263
	,TOKCONNECT=264
	,TOKCONNECTOR=265
	,TOKCONSTANT=266
	,TOKCONSTRAINEDBY=267
	,TOKDER=268
	,TOKDISCRETE=269
	,TOKEACH=270
	,TOKELSE=271
	,TOKELSEIF=272
	,TOKELSEWHEN=273
	,TOKENCAPSULATED=274
	,TOKEND=275
	,TOKENUMERATION=276
	,TOKEQUATION=277
	,TOKEXPANDABLE=278
	,TOKEXTENDS=279
	,TOKEXTERNAL=280
	,TOKFALSE=281
	,TOKFINAL=282
	,TOKFLOW=283
	,TOKFOR=284
	,TOKFUNCTION=285
	,TOKIF=286
	,TOKIMPORT=287
	,TOKIMPURE=288
	,TOKIN=289
	,TOKINITIAL=290
	,TOKINNER=291
	,TOKINPUT=292
	,TOKLOOP=293
	,TOKMODEL=294
	,TOKOPERATOR=295
	,TOKOR=296
	,TOKOUTER=297
	,TOKOUTPUT=298
	,TOKPACKAGE=299
	,TOKPARAMETER=300
	,TOKPARTIAL=301
	,TOKPROTECTED=302
	,TOKPUBLIC=303
	,TOKPURE=304
	,TOKRECORD=305
	,TOKREDECLARE=306
	,TOKREPLACEABLE=307
	,TOKRETURN=308
	,TOKSTREAM=309
	,TOKTHEN=310
	,TOKTRUE=311
	,TOKTYPE=312
	,TOKWHEN=313
	,TOKWHILE=314
	,TOKWITHIN=315
	,TOKINITIALEQ=316
	,TOKINITIALALG=317
	,TOKENDSUB=318
	,TOKSEMICOLON=319
	,TOKCOMA=320
	,TOKCARET=321
	,TOKOPAREN=322
	,TOKCPAREN=323
	,TOKOBRACE=324
	,TOKCBRACE=325
	,TOKOBRACKET=326
	,TOKCBRACKET=327
	,TOKDOT=328
	,TOKINT=329
	,TOKFLOAT=330
	,TOKSTRING=331
	,TOKID=332
	,TOKASSING=333
	,TOKEQUAL=334
	,TOKCOLON=335
	,TOKNOT=336
	,TOKLOWER=337
	,TOKGREATER=338
	,TOKLOWEREQ=339
	,TOKGREATEREQ=340
	,TOKCOMPEQ=341
	,TOKCOMPNE=342
	,TOKPLUS=343
	,TOKDOTPLUS=344
	,TOKMINUS=345
	,TOKDOTMINUS=346
	,TOKUMINUS=347
	,TOKUPLUS=348
	,TOKSLASH=349
	,TOKDOTSLASH=350
	,TOKSTAR=351
	,TOKDOTSTAR=352
	,TOKDOTCARET=353
	,TOKFC=354
	,TOKPARENS=355


#line 310 "/usr/share/bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_MCC_Parser_PARSE (YY_MCC_Parser_PARSE_PARAM);
 virtual void YY_MCC_Parser_ERROR(char *msg) YY_MCC_Parser_ERROR_BODY;
#ifdef YY_MCC_Parser_PURE
#ifdef YY_MCC_Parser_LSP_NEEDED
 virtual int  YY_MCC_Parser_LEX (YY_MCC_Parser_STYPE *YY_MCC_Parser_LVAL,YY_MCC_Parser_LTYPE *YY_MCC_Parser_LLOC) YY_MCC_Parser_LEX_BODY;
#else
 virtual int  YY_MCC_Parser_LEX (YY_MCC_Parser_STYPE *YY_MCC_Parser_LVAL) YY_MCC_Parser_LEX_BODY;
#endif
#else
 virtual int YY_MCC_Parser_LEX() YY_MCC_Parser_LEX_BODY;
 YY_MCC_Parser_STYPE YY_MCC_Parser_LVAL;
#ifdef YY_MCC_Parser_LSP_NEEDED
 YY_MCC_Parser_LTYPE YY_MCC_Parser_LLOC;
#endif
 int   YY_MCC_Parser_NERRS;
 int    YY_MCC_Parser_CHAR;
#endif
#if YY_MCC_Parser_DEBUG != 0
 int YY_MCC_Parser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_MCC_Parser_CLASS(YY_MCC_Parser_CONSTRUCTOR_PARAM);
public:
 YY_MCC_Parser_MEMBERS 
};
/* other declare folow */
#if YY_MCC_Parser_USE_CONST_TOKEN != 0

 #line 341 "/usr/share/bison++/bison.cc"
const int YY_MCC_Parser_CLASS::TOKALGORITHM=258;
const int YY_MCC_Parser_CLASS::TOKAND=259;
const int YY_MCC_Parser_CLASS::TOKANNOTATION=260;
const int YY_MCC_Parser_CLASS::TOKBLOCK=261;
const int YY_MCC_Parser_CLASS::TOKBREAK=262;
const int YY_MCC_Parser_CLASS::TOKCLASS=263;
const int YY_MCC_Parser_CLASS::TOKCONNECT=264;
const int YY_MCC_Parser_CLASS::TOKCONNECTOR=265;
const int YY_MCC_Parser_CLASS::TOKCONSTANT=266;
const int YY_MCC_Parser_CLASS::TOKCONSTRAINEDBY=267;
const int YY_MCC_Parser_CLASS::TOKDER=268;
const int YY_MCC_Parser_CLASS::TOKDISCRETE=269;
const int YY_MCC_Parser_CLASS::TOKEACH=270;
const int YY_MCC_Parser_CLASS::TOKELSE=271;
const int YY_MCC_Parser_CLASS::TOKELSEIF=272;
const int YY_MCC_Parser_CLASS::TOKELSEWHEN=273;
const int YY_MCC_Parser_CLASS::TOKENCAPSULATED=274;
const int YY_MCC_Parser_CLASS::TOKEND=275;
const int YY_MCC_Parser_CLASS::TOKENUMERATION=276;
const int YY_MCC_Parser_CLASS::TOKEQUATION=277;
const int YY_MCC_Parser_CLASS::TOKEXPANDABLE=278;
const int YY_MCC_Parser_CLASS::TOKEXTENDS=279;
const int YY_MCC_Parser_CLASS::TOKEXTERNAL=280;
const int YY_MCC_Parser_CLASS::TOKFALSE=281;
const int YY_MCC_Parser_CLASS::TOKFINAL=282;
const int YY_MCC_Parser_CLASS::TOKFLOW=283;
const int YY_MCC_Parser_CLASS::TOKFOR=284;
const int YY_MCC_Parser_CLASS::TOKFUNCTION=285;
const int YY_MCC_Parser_CLASS::TOKIF=286;
const int YY_MCC_Parser_CLASS::TOKIMPORT=287;
const int YY_MCC_Parser_CLASS::TOKIMPURE=288;
const int YY_MCC_Parser_CLASS::TOKIN=289;
const int YY_MCC_Parser_CLASS::TOKINITIAL=290;
const int YY_MCC_Parser_CLASS::TOKINNER=291;
const int YY_MCC_Parser_CLASS::TOKINPUT=292;
const int YY_MCC_Parser_CLASS::TOKLOOP=293;
const int YY_MCC_Parser_CLASS::TOKMODEL=294;
const int YY_MCC_Parser_CLASS::TOKOPERATOR=295;
const int YY_MCC_Parser_CLASS::TOKOR=296;
const int YY_MCC_Parser_CLASS::TOKOUTER=297;
const int YY_MCC_Parser_CLASS::TOKOUTPUT=298;
const int YY_MCC_Parser_CLASS::TOKPACKAGE=299;
const int YY_MCC_Parser_CLASS::TOKPARAMETER=300;
const int YY_MCC_Parser_CLASS::TOKPARTIAL=301;
const int YY_MCC_Parser_CLASS::TOKPROTECTED=302;
const int YY_MCC_Parser_CLASS::TOKPUBLIC=303;
const int YY_MCC_Parser_CLASS::TOKPURE=304;
const int YY_MCC_Parser_CLASS::TOKRECORD=305;
const int YY_MCC_Parser_CLASS::TOKREDECLARE=306;
const int YY_MCC_Parser_CLASS::TOKREPLACEABLE=307;
const int YY_MCC_Parser_CLASS::TOKRETURN=308;
const int YY_MCC_Parser_CLASS::TOKSTREAM=309;
const int YY_MCC_Parser_CLASS::TOKTHEN=310;
const int YY_MCC_Parser_CLASS::TOKTRUE=311;
const int YY_MCC_Parser_CLASS::TOKTYPE=312;
const int YY_MCC_Parser_CLASS::TOKWHEN=313;
const int YY_MCC_Parser_CLASS::TOKWHILE=314;
const int YY_MCC_Parser_CLASS::TOKWITHIN=315;
const int YY_MCC_Parser_CLASS::TOKINITIALEQ=316;
const int YY_MCC_Parser_CLASS::TOKINITIALALG=317;
const int YY_MCC_Parser_CLASS::TOKENDSUB=318;
const int YY_MCC_Parser_CLASS::TOKSEMICOLON=319;
const int YY_MCC_Parser_CLASS::TOKCOMA=320;
const int YY_MCC_Parser_CLASS::TOKCARET=321;
const int YY_MCC_Parser_CLASS::TOKOPAREN=322;
const int YY_MCC_Parser_CLASS::TOKCPAREN=323;
const int YY_MCC_Parser_CLASS::TOKOBRACE=324;
const int YY_MCC_Parser_CLASS::TOKCBRACE=325;
const int YY_MCC_Parser_CLASS::TOKOBRACKET=326;
const int YY_MCC_Parser_CLASS::TOKCBRACKET=327;
const int YY_MCC_Parser_CLASS::TOKDOT=328;
const int YY_MCC_Parser_CLASS::TOKINT=329;
const int YY_MCC_Parser_CLASS::TOKFLOAT=330;
const int YY_MCC_Parser_CLASS::TOKSTRING=331;
const int YY_MCC_Parser_CLASS::TOKID=332;
const int YY_MCC_Parser_CLASS::TOKASSING=333;
const int YY_MCC_Parser_CLASS::TOKEQUAL=334;
const int YY_MCC_Parser_CLASS::TOKCOLON=335;
const int YY_MCC_Parser_CLASS::TOKNOT=336;
const int YY_MCC_Parser_CLASS::TOKLOWER=337;
const int YY_MCC_Parser_CLASS::TOKGREATER=338;
const int YY_MCC_Parser_CLASS::TOKLOWEREQ=339;
const int YY_MCC_Parser_CLASS::TOKGREATEREQ=340;
const int YY_MCC_Parser_CLASS::TOKCOMPEQ=341;
const int YY_MCC_Parser_CLASS::TOKCOMPNE=342;
const int YY_MCC_Parser_CLASS::TOKPLUS=343;
const int YY_MCC_Parser_CLASS::TOKDOTPLUS=344;
const int YY_MCC_Parser_CLASS::TOKMINUS=345;
const int YY_MCC_Parser_CLASS::TOKDOTMINUS=346;
const int YY_MCC_Parser_CLASS::TOKUMINUS=347;
const int YY_MCC_Parser_CLASS::TOKUPLUS=348;
const int YY_MCC_Parser_CLASS::TOKSLASH=349;
const int YY_MCC_Parser_CLASS::TOKDOTSLASH=350;
const int YY_MCC_Parser_CLASS::TOKSTAR=351;
const int YY_MCC_Parser_CLASS::TOKDOTSTAR=352;
const int YY_MCC_Parser_CLASS::TOKDOTCARET=353;
const int YY_MCC_Parser_CLASS::TOKFC=354;
const int YY_MCC_Parser_CLASS::TOKPARENS=355;


#line 341 "/usr/share/bison++/bison.cc"
 /* const YY_MCC_Parser_CLASS::token */
#endif
/*apres const  */
YY_MCC_Parser_CLASS::YY_MCC_Parser_CLASS(YY_MCC_Parser_CONSTRUCTOR_PARAM) YY_MCC_Parser_CONSTRUCTOR_INIT
{
#if YY_MCC_Parser_DEBUG != 0
YY_MCC_Parser_DEBUG_FLAG=0;
#endif
YY_MCC_Parser_CONSTRUCTOR_CODE;
};
#endif

 #line 352 "/usr/share/bison++/bison.cc"


#define	YYFINAL		594
#define	YYFLAG		-32768
#define	YYNTBASE	101

#define YYTRANSLATE(x) ((unsigned)(x) <= 355 ? yytranslate[x] : 232)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100
};

#if YY_MCC_Parser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     6,    10,    11,    13,    15,    18,    22,
    23,    26,    30,    34,    35,    37,    40,    41,    43,    44,
    47,    50,    51,    53,    55,    57,    60,    62,    65,    67,
    69,    72,    74,    75,    77,    78,    80,    86,    94,   102,
   113,   121,   122,   126,   130,   131,   137,   145,   146,   148,
   149,   154,   158,   159,   162,   163,   167,   173,   176,   177,
   179,   183,   185,   189,   191,   193,   200,   204,   208,   211,
   212,   214,   219,   221,   225,   228,   229,   233,   238,   239,
   241,   242,   244,   245,   247,   248,   251,   255,   257,   260,
   262,   264,   269,   270,   272,   274,   277,   279,   282,   286,
   288,   290,   292,   294,   296,   298,   300,   302,   303,   305,
   307,   311,   315,   319,   320,   323,   324,   327,   330,   333,
   335,   336,   338,   341,   344,   347,   351,   352,   354,   356,
   360,   362,   364,   365,   367,   371,   375,   379,   383,   387,
   388,   391,   396,   398,   400,   402,   404,   409,   415,   421,
   423,   425,   427,   431,   434,   438,   441,   442,   444,   446,
   448,   452,   454,   456,   457,   462,   463,   465,   468,   471,
   474,   477,   480,   481,   485,   488,   491,   496,   498,   501,
   504,   507,   508,   512,   515,   516,   519,   526,   534,   535,
   541,   550,   551,   557,   558,   561,   568,   569,   573,   577,
   584,   587,   589,   592,   595,   598,   601,   608,   617,   618,
   624,   631,   640,   641,   647,   648,   651,   652,   655,   656,
   660,   661,   663,   666,   670,   671,   674,   677,   679,   685,
   687,   691,   692,   694,   697,   700,   701,   704,   707,   709,
   713,   716,   719,   722,   726,   730,   734,   738,   742,   746,
   750,   754,   758,   762,   766,   770,   774,   778,   782,   786,
   790,   794,   798,   806,   807,   809,   810,   816,   818,   820,
   822,   824,   826,   829,   832,   834,   839,   843,   845,   846,
   850,   854,   859,   860,   863,   866,   867,   872,   874,   878,
   881,   884,   887,   891,   895,   899,   903,   907,   911,   915,
   919,   923,   927,   931,   935,   939,   943,   947,   951,   955,
   959,   963,   964,   969,   970,   974,   978,   981,   987,   992,
   997
};

static const short yyrhs[] = {   102,
     0,   103,   106,     0,     0,    60,   104,    64,     0,     0,
   105,     0,    77,     0,    73,    77,     0,   105,    73,    77,
     0,     0,   106,   107,     0,   113,   108,    64,     0,   109,
   110,   117,     0,     0,    19,     0,   116,   114,     0,     0,
    23,     0,     0,    49,   115,     0,    33,   115,     0,     0,
    27,     0,     8,     0,    39,     0,   115,    50,     0,     6,
     0,   111,    10,     0,    57,     0,    44,     0,   112,    30,
     0,    40,     0,     0,    40,     0,     0,    46,     0,    77,
   125,   119,    20,    77,     0,    77,    79,   177,   105,   148,
   176,   132,     0,    77,    79,    21,    67,   171,    68,   132,
     0,    77,    79,    13,    67,   105,    65,    77,   118,    68,
   132,     0,    24,    77,   176,   125,   119,    20,    77,     0,
     0,   118,    65,    77,     0,   124,   120,   123,     0,     0,
    25,   121,   122,   182,    64,     0,    25,   121,   224,    79,
   122,   182,    64,     0,     0,    76,     0,     0,    77,    67,
   226,    68,     0,    77,    67,    68,     0,     0,   183,    64,
     0,     0,   127,    64,   133,     0,   127,    64,   133,   154,
   153,     0,   154,   153,     0,     0,    76,     0,    76,    88,
   126,     0,    76,     0,    76,    88,   126,     0,   128,     0,
   134,     0,   135,   113,   136,   137,   140,   138,     0,    32,
   129,   132,     0,    77,    79,   105,     0,   105,   130,     0,
     0,    97,     0,    73,    69,   131,    70,     0,    77,     0,
    77,    65,   131,     0,   125,   182,     0,     0,   127,    64,
   133,     0,    24,   105,   176,   182,     0,     0,    51,     0,
     0,    36,     0,     0,    42,     0,     0,   139,   132,     0,
    12,   105,   176,     0,   141,     0,    52,   141,     0,   108,
     0,   142,     0,   143,   147,   148,   149,     0,     0,   146,
     0,   145,     0,   145,   146,     0,   144,     0,   144,   145,
     0,   144,   145,   146,     0,    28,     0,    54,     0,    14,
     0,    45,     0,    11,     0,    37,     0,    43,     0,   105,
     0,     0,   180,     0,   150,     0,   149,    65,   150,     0,
   151,   152,   132,     0,    77,   148,   155,     0,     0,    31,
   219,     0,     0,   153,   154,     0,    48,   133,     0,    47,
   133,     0,   184,     0,     0,   156,     0,   157,   165,     0,
    79,   219,     0,    78,   219,     0,    67,   158,    68,     0,
     0,   159,     0,   160,     0,   159,    65,   160,     0,   162,
     0,   166,     0,     0,    15,     0,   161,   113,   163,     0,
   161,   113,   164,     0,   105,   155,   125,     0,    52,   169,
   138,     0,    52,   174,   138,     0,     0,    79,   219,     0,
    51,   161,   113,   167,     0,   168,     0,   164,     0,   169,
     0,   174,     0,   114,    77,    79,   170,     0,   177,   105,
   148,   176,   132,     0,    21,    67,   171,    68,   132,     0,
    64,     0,   172,     0,   173,     0,   172,    65,   173,     0,
    77,   132,     0,   143,   147,   175,     0,   151,   132,     0,
     0,   157,     0,   143,     0,   179,     0,   178,    65,   179,
     0,    80,     0,   219,     0,     0,    71,   181,   178,    72,
     0,     0,   183,     0,     5,   157,     0,    61,   185,     0,
    22,   185,     0,    62,   198,     0,     3,   198,     0,     0,
   185,   186,    64,     0,   197,   132,     0,   194,   132,     0,
   228,    79,   219,   132,     0,   222,     0,   191,   132,     0,
   192,   132,     0,   189,   188,     0,     0,   188,    65,   189,
     0,    77,   190,     0,     0,    34,   219,     0,    29,   187,
    38,   185,    20,    29,     0,    58,   219,    55,   185,   193,
    20,    58,     0,     0,   193,    18,   219,    55,   185,     0,
    31,   219,    55,   185,   195,   196,    20,    31,     0,     0,
   195,    17,   219,    55,   185,     0,     0,    16,   185,     0,
     9,    67,   224,    65,   224,    68,     0,     0,   198,   199,
    64,     0,   224,   213,   132,     0,    67,   207,    68,    78,
   224,   215,     0,   200,   132,     0,   201,     0,   203,   132,
     0,   204,   132,     0,     7,   132,     0,    53,   132,     0,
    59,   219,    38,   198,    20,    59,     0,    58,   219,    55,
   198,   202,    20,    58,   132,     0,     0,   202,    18,   219,
    55,   198,     0,    29,   187,    38,   198,    20,    29,     0,
    31,   219,    55,   198,   205,   206,    20,    31,     0,     0,
   205,    17,   219,    55,   198,     0,     0,    16,   198,     0,
     0,   219,   208,     0,     0,    65,   220,   208,     0,     0,
   210,     0,   211,   212,     0,    77,    79,   214,     0,     0,
    65,   210,     0,    78,   219,     0,   215,     0,    30,   105,
    67,   209,    68,     0,   219,     0,    67,   216,    68,     0,
     0,   217,     0,   214,   218,     0,   211,   218,     0,     0,
    65,   217,     0,    29,   187,     0,   222,     0,    67,   207,
    68,     0,    90,   219,     0,    88,   219,     0,    81,   219,
     0,   219,    80,   219,     0,   219,    82,   219,     0,   219,
    84,   219,     0,   219,    83,   219,     0,   219,    85,   219,
     0,   219,    87,   219,     0,   219,    86,   219,     0,   219,
    94,   219,     0,   219,    95,   219,     0,   219,    96,   219,
     0,   219,    97,   219,     0,   219,    88,   219,     0,   219,
    90,   219,     0,   219,    89,   219,     0,   219,    91,   219,
     0,   219,    66,   219,     0,   219,    98,   219,     0,   219,
     4,   219,     0,   219,    41,   219,     0,    31,   219,    55,
   219,   221,    16,   219,     0,     0,   219,     0,     0,   221,
    17,   219,    55,   219,     0,    74,     0,    75,     0,    76,
     0,    26,     0,    56,     0,    13,   215,     0,    35,   215,
     0,   231,     0,    71,   226,   223,    72,     0,    69,   217,
    70,     0,    63,     0,     0,   223,    64,   226,     0,    77,
   148,   227,     0,    73,    77,   148,   227,     0,     0,    65,
   226,     0,   219,   225,     0,     0,   227,    73,    77,   148,
     0,   222,     0,    67,   207,    68,     0,    90,   219,     0,
    88,   219,     0,    81,   219,     0,   228,    80,   219,     0,
   228,    82,   219,     0,   228,    84,   219,     0,   228,    83,
   219,     0,   228,    85,   219,     0,   228,    87,   219,     0,
   228,    86,   219,     0,   228,    94,   219,     0,   228,    95,
   219,     0,   228,    96,   219,     0,   228,    97,   219,     0,
   228,    88,   219,     0,   228,    90,   219,     0,   228,    89,
   219,     0,   228,    91,   219,     0,   228,    66,   219,     0,
   228,    98,   219,     0,   228,     4,   219,     0,   228,    41,
   219,     0,     0,   229,    73,    77,   148,     0,     0,   230,
    73,    77,     0,    73,    77,   230,     0,    77,   230,     0,
    73,    77,   230,   180,   229,     0,    77,   230,   180,   229,
     0,    73,    77,   230,   215,     0,    77,   230,   215,     0
};

#endif

#if (YY_MCC_Parser_DEBUG != 0) || defined(YY_MCC_Parser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
   176,   180,   185,   187,   190,   192,   195,   197,   198,   201,
   203,   206,   210,   214,   216,   219,   223,   225,   228,   230,
   231,   234,   236,   239,   241,   242,   243,   244,   245,   246,
   247,   248,   251,   253,   256,   258,   261,   263,   264,   265,
   266,   269,   271,   274,   278,   280,   281,   284,   286,   289,
   291,   292,   295,   297,   300,   302,   303,   304,   307,   309,
   310,   313,   315,   318,   320,   321,   324,   328,   330,   333,
   335,   336,   339,   341,   344,   348,   350,   353,   357,   359,
   362,   364,   367,   369,   372,   374,   377,   381,   383,   386,
   388,   391,   395,   397,   398,   399,   400,   401,   402,   405,
   407,   410,   412,   413,   416,   418,   421,   425,   427,   430,
   432,   435,   439,   443,   445,   448,   450,   453,   455,   456,
   459,   461,   464,   466,   467,   470,   474,   476,   479,   481,
   484,   486,   489,   491,   494,   496,   499,   503,   505,   508,
   510,   513,   517,   519,   522,   524,   527,   531,   533,   536,
   538,   541,   543,   546,   550,   554,   558,   560,   563,   567,
   569,   572,   574,   577,   578,   581,   583,   586,   590,   592,
   593,   594,   597,   599,   602,   604,   605,   606,   607,   608,
   611,   615,   617,   620,   624,   626,   629,   633,   638,   640,
   643,   647,   649,   652,   654,   657,   661,   663,   666,   668,
   670,   671,   672,   673,   674,   675,   678,   682,   686,   688,
   691,   695,   699,   701,   704,   706,   709,   711,   714,   716,
   719,   721,   724,   728,   732,   734,   737,   739,   742,   744,
   747,   751,   753,   756,   758,   761,   763,   764,   768,   770,
   771,   772,   773,   774,   775,   776,   777,   778,   779,   780,
   781,   782,   783,   784,   785,   786,   787,   788,   789,   790,
   791,   792,   793,   797,   799,   802,   804,   807,   809,   810,
   811,   812,   813,   814,   815,   816,   817,   818,   821,   823,
   827,   829,   832,   834,   837,   841,   843,   847,   849,   850,
   851,   852,   853,   854,   855,   856,   857,   858,   859,   860,
   861,   862,   863,   864,   865,   866,   867,   868,   869,   870,
   871,   874,   876,   879,   881,   884,   886,   887,   888,   889,
   890
};

static const char * const yytname[] = {   "$","error","$illegal.","TOKALGORITHM",
"TOKAND","TOKANNOTATION","TOKBLOCK","TOKBREAK","TOKCLASS","TOKCONNECT","TOKCONNECTOR",
"TOKCONSTANT","TOKCONSTRAINEDBY","TOKDER","TOKDISCRETE","TOKEACH","TOKELSE",
"TOKELSEIF","TOKELSEWHEN","TOKENCAPSULATED","TOKEND","TOKENUMERATION","TOKEQUATION",
"TOKEXPANDABLE","TOKEXTENDS","TOKEXTERNAL","TOKFALSE","TOKFINAL","TOKFLOW","TOKFOR",
"TOKFUNCTION","TOKIF","TOKIMPORT","TOKIMPURE","TOKIN","TOKINITIAL","TOKINNER",
"TOKINPUT","TOKLOOP","TOKMODEL","TOKOPERATOR","TOKOR","TOKOUTER","TOKOUTPUT",
"TOKPACKAGE","TOKPARAMETER","TOKPARTIAL","TOKPROTECTED","TOKPUBLIC","TOKPURE",
"TOKRECORD","TOKREDECLARE","TOKREPLACEABLE","TOKRETURN","TOKSTREAM","TOKTHEN",
"TOKTRUE","TOKTYPE","TOKWHEN","TOKWHILE","TOKWITHIN","TOKINITIALEQ","TOKINITIALALG",
"TOKENDSUB","TOKSEMICOLON","TOKCOMA","TOKCARET","TOKOPAREN","TOKCPAREN","TOKOBRACE",
"TOKCBRACE","TOKOBRACKET","TOKCBRACKET","TOKDOT","TOKINT","TOKFLOAT","TOKSTRING",
"TOKID","TOKASSING","TOKEQUAL","TOKCOLON","TOKNOT","TOKLOWER","TOKGREATER","TOKLOWEREQ",
"TOKGREATEREQ","TOKCOMPEQ","TOKCOMPNE","TOKPLUS","TOKDOTPLUS","TOKMINUS","TOKDOTMINUS",
"TOKUMINUS","TOKUPLUS","TOKSLASH","TOKDOTSLASH","TOKSTAR","TOKDOTSTAR","TOKDOTCARET",
"TOKFC","TOKPARENS","input","stored_definition","opt_within_name","opt_name",
"name","class_definition_list","class_definition_aux","class_definition","opt_encapsulated",
"class_prefix","opt_expandable","opt_pure_impure_operator","opt_final","class_prefixes",
"opt_operator","opt_partial","class_specifier","more_ids","composition","opt_external_composition",
"opt_language_specification","opt_external_function_call","opt_annotation_composition",
"composition_aux_1","string_comment","string_comment_no_empty","element","import_clause",
"opt_import","opt_import_spec","import_list","comment","element_list","extends_clause",
"opt_redeclare","opt_inner","opt_outer","opt_constraining_clause","constraining_clause",
"element_option","element_option_1","component_clause","type_prefix","opt_flow_stream",
"opt_disc_param_const","opt_input_output","type_specifier","opt_array_subscripts",
"component_list","component_declaration","declaration","opt_condition_attribute",
"composition_list","composition_element","opt_modification","modification","class_modification",
"opt_argument_list","argument_list","argument","opt_each","element_modification_replaceable",
"element_modification","element_replaceable","opt_equal_exp","element_redeclaration",
"element_redeclaration_1","element_redeclaration_2","short_class_definition",
"short_class_definition_exp","enumeration_args","enum_list","enumeration_literal",
"component_clause1","component_declaration1","opt_class_modification","base_prefix",
"subscript_list","subscript","array_subscripts","@1","opt_annotation","annotation",
"eq_alg_section_init","equation_list","equation","for_indices","opt_more_indexes",
"for_index","opt_in","for_equation","when_equation","opt_else_when","if_equation",
"opt_elseif_eq","opt_else_eq","connect_clause","statement_list","statement",
"while_statement","when_statement","opt_else_when_list","for_statement","if_statement",
"opt_esleif_st","opt_else_st","output_expression_list","output_expression_list_more",
"opt_named_arguments","named_arguments","named_argument","opt_more_args","opt_assing",
"function_argument","function_call_args","opt_function_args","function_arguments",
"opt_function_arguments","expression","opt_expression","opt_elseif_exp","primary",
"primary_exp_list","component_reference","expression_list_more","expression_list",
"component_reference_list","simple_expression","more_cr","more_comp_call","opt_comp_call",
""
};
#endif

static const short yyr1[] = {     0,
   101,   102,   103,   103,   104,   104,   105,   105,   105,   106,
   106,   107,   108,   109,   109,   110,   111,   111,   112,   112,
   112,   113,   113,   114,   114,   114,   114,   114,   114,   114,
   114,   114,   115,   115,   116,   116,   117,   117,   117,   117,
   117,   118,   118,   119,   120,   120,   120,   121,   121,   122,
   122,   122,   123,   123,   124,   124,   124,   124,   125,   125,
   125,   126,   126,   127,   127,   127,   128,   129,   129,   130,
   130,   130,   131,   131,   132,   133,   133,   134,   135,   135,
   136,   136,   137,   137,   138,   138,   139,   140,   140,   141,
   141,   142,   143,   143,   143,   143,   143,   143,   143,   144,
   144,   145,   145,   145,   146,   146,   147,   148,   148,   149,
   149,   150,   151,   152,   152,   153,   153,   154,   154,   154,
   155,   155,   156,   156,   156,   157,   158,   158,   159,   159,
   160,   160,   161,   161,   162,   162,   163,   164,   164,   165,
   165,   166,   167,   167,   168,   168,   169,   170,   170,   171,
   171,   172,   172,   173,   174,   175,   176,   176,   177,   178,
   178,   179,   179,   181,   180,   182,   182,   183,   184,   184,
   184,   184,   185,   185,   186,   186,   186,   186,   186,   186,
   187,   188,   188,   189,   190,   190,   191,   192,   193,   193,
   194,   195,   195,   196,   196,   197,   198,   198,   199,   199,
   199,   199,   199,   199,   199,   199,   200,   201,   202,   202,
   203,   204,   205,   205,   206,   206,   207,   207,   208,   208,
   209,   209,   210,   211,   212,   212,   213,   213,   214,   214,
   215,   216,   216,   217,   217,   218,   218,   218,   219,   219,
   219,   219,   219,   219,   219,   219,   219,   219,   219,   219,
   219,   219,   219,   219,   219,   219,   219,   219,   219,   219,
   219,   219,   219,   220,   220,   221,   221,   222,   222,   222,
   222,   222,   222,   222,   222,   222,   222,   222,   223,   223,
   224,   224,   225,   225,   226,   227,   227,   228,   228,   228,
   228,   228,   228,   228,   228,   228,   228,   228,   228,   228,
   228,   228,   228,   228,   228,   228,   228,   228,   228,   228,
   228,   229,   229,   230,   230,   231,   231,   231,   231,   231,
   231
};

static const short yyr2[] = {     0,
     1,     2,     0,     3,     0,     1,     1,     2,     3,     0,
     2,     3,     3,     0,     1,     2,     0,     1,     0,     2,
     2,     0,     1,     1,     1,     2,     1,     2,     1,     1,
     2,     1,     0,     1,     0,     1,     5,     7,     7,    10,
     7,     0,     3,     3,     0,     5,     7,     0,     1,     0,
     4,     3,     0,     2,     0,     3,     5,     2,     0,     1,
     3,     1,     3,     1,     1,     6,     3,     3,     2,     0,
     1,     4,     1,     3,     2,     0,     3,     4,     0,     1,
     0,     1,     0,     1,     0,     2,     3,     1,     2,     1,
     1,     4,     0,     1,     1,     2,     1,     2,     3,     1,
     1,     1,     1,     1,     1,     1,     1,     0,     1,     1,
     3,     3,     3,     0,     2,     0,     2,     2,     2,     1,
     0,     1,     2,     2,     2,     3,     0,     1,     1,     3,
     1,     1,     0,     1,     3,     3,     3,     3,     3,     0,
     2,     4,     1,     1,     1,     1,     4,     5,     5,     1,
     1,     1,     3,     2,     3,     2,     0,     1,     1,     1,
     3,     1,     1,     0,     4,     0,     1,     2,     2,     2,
     2,     2,     0,     3,     2,     2,     4,     1,     2,     2,
     2,     0,     3,     2,     0,     2,     6,     7,     0,     5,
     8,     0,     5,     0,     2,     6,     0,     3,     3,     6,
     2,     1,     2,     2,     2,     2,     6,     8,     0,     5,
     6,     8,     0,     5,     0,     2,     0,     2,     0,     3,
     0,     1,     2,     3,     0,     2,     2,     1,     5,     1,
     3,     0,     1,     2,     2,     0,     2,     2,     1,     3,
     2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     7,     0,     1,     0,     5,     1,     1,     1,
     1,     1,     2,     2,     1,     4,     3,     1,     0,     3,
     3,     4,     0,     2,     2,     0,     4,     1,     3,     2,
     2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     0,     4,     0,     3,     3,     2,     5,     4,     4,
     3
};

static const short yydefact[] = {     3,
     5,     1,    10,     0,     7,     0,     6,    22,     8,     4,
     0,    23,    11,    14,     9,    15,     0,    35,    12,    36,
     0,    17,     0,    59,    13,    27,    24,    18,    33,    25,
    32,    30,    33,    29,     0,     0,    16,     0,   157,    60,
    93,    79,    34,    21,    20,    28,    31,    26,   133,   158,
    59,     0,   104,     0,   102,     0,   100,   105,   106,   103,
   101,   159,    97,    95,    94,     0,   197,   173,     0,     0,
    79,    79,    80,   173,   197,     0,    45,     0,    64,    65,
    22,   116,   120,   134,   133,     0,   128,   129,    22,   131,
   132,    79,    62,    61,     0,     0,    98,    96,   108,   172,
   170,   157,     7,    70,    59,     0,   119,   118,   169,   171,
     0,    48,    53,    79,    81,    58,    22,   126,   133,     0,
     0,     0,     0,   150,    59,     0,   151,   152,    99,   164,
   157,   109,    59,     0,     0,    59,     0,     0,   217,     0,
   108,     0,    59,   202,    59,    59,     0,     0,     0,   271,
     0,     0,     0,   272,     0,   278,   217,     0,     0,     0,
   268,   269,   270,   314,     0,     0,     0,     0,    59,    59,
    59,    59,   288,     0,   275,   166,     0,     0,    71,    69,
   166,    67,    79,    37,    49,    50,     0,    44,     0,    56,
    82,    83,   117,    93,   130,    93,   121,   135,   136,     0,
    63,     0,   154,    59,     0,     0,    59,   205,   185,     0,
   182,     0,   217,     0,     0,     0,     0,   239,   206,     0,
     0,     0,   219,   108,   286,   198,   201,   203,   204,   232,
     0,    59,   228,     0,   273,     0,     0,   274,     0,     0,
     0,   314,   236,   236,     0,   230,   283,   279,   314,   317,
   292,   291,   290,   174,   179,   180,   176,   175,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    78,   167,
    68,     0,    75,    77,   108,   166,     0,   168,    54,   116,
    84,    14,     0,     0,   144,   142,   143,   145,   146,    85,
    85,     0,     0,    59,   122,   140,    41,    42,    39,   153,
   162,     0,   160,   163,    38,     0,   184,   197,   181,     0,
     0,   243,   242,   241,     0,     0,   197,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   197,   197,     0,   264,   218,   286,
   281,     0,   233,   227,   199,     0,   173,   173,   173,   289,
     0,     0,     0,     0,   235,   234,   277,     0,   285,     0,
   316,     0,   312,   321,   310,   311,   308,    59,   293,   294,
   296,   295,   297,   299,   298,   304,   306,   305,   307,   300,
   301,   302,   303,   309,    73,     0,     0,     0,    50,    57,
    14,    90,    85,    88,    91,     0,     0,   107,     0,     0,
   138,    59,   139,   125,   124,   137,     0,   123,     0,     0,
   165,   186,     0,     0,     0,   240,   261,   262,   213,   259,
   244,   245,   247,   246,   248,   250,   249,   255,   257,   256,
   258,   251,   252,   253,   254,   260,   209,     0,     0,   265,
   219,   282,     0,   231,     0,     0,   192,   189,   221,   224,
   238,   237,   284,     0,   276,   312,   320,   315,   319,   177,
     0,    72,    52,     0,    46,     0,   166,    89,    66,   108,
    93,   108,    59,   155,   157,    86,   141,     0,    59,   161,
     0,   183,   266,   215,     0,     0,     0,   220,   108,     0,
     0,   194,     0,     0,     0,   222,   225,   280,   318,     0,
    74,    51,     0,     0,     0,   147,     0,   121,   156,    87,
    43,    40,   211,     0,   197,     0,     0,     0,     0,   207,
   200,   287,   196,   187,   173,     0,     0,     0,     0,   229,
     0,   223,   108,    47,    92,   110,   114,     0,   108,   113,
     0,     0,   216,     0,     0,     0,    59,   195,     0,     0,
     0,   188,   226,   313,     0,     0,    59,     0,   157,   263,
     0,   197,   212,   197,   208,   173,   191,   173,   111,   115,
   112,    59,    59,     0,   214,   210,   193,   190,   149,   148,
   267,     0,     0,     0
};

static const short yydefgoto[] = {   592,
     2,     3,     6,   408,     8,    13,   402,    18,    21,    35,
    36,    14,   293,    38,    22,    25,   419,    76,   113,   186,
   286,   188,    77,   181,    94,   106,    79,   105,   180,   396,
   182,   107,    80,    81,   192,   292,   411,   412,   403,   404,
   405,    62,    63,    64,    65,   409,   225,   545,   546,   547,
   567,   116,    82,   304,   305,    50,    86,    87,    88,    89,
    90,   198,   199,   418,    91,   296,   297,   298,   516,   126,
   127,   128,   299,   484,    51,    66,   312,   313,   132,   206,
   279,   280,    83,   101,   168,   210,   319,   211,   317,   169,
   170,   503,   171,   502,   537,   172,   100,   142,   143,   144,
   495,   145,   146,   494,   527,   222,   349,   505,   506,   243,
   542,   232,   244,   233,   352,   245,   365,   246,   451,   524,
   218,   370,   147,   369,   248,   351,   174,   469,   250,   175
};

static const short yypact[] = {     3,
    28,-32768,-32768,    61,-32768,    76,   133,    82,-32768,-32768,
   156,-32768,-32768,   163,-32768,-32768,   174,   197,-32768,-32768,
    12,  1471,   170,   145,-32768,-32768,-32768,-32768,   212,-32768,
   204,-32768,   212,-32768,   250,   231,-32768,   213,   198,   181,
   221,   436,-32768,-32768,-32768,-32768,-32768,-32768,    22,-32768,
   195,   196,-32768,   210,-32768,   211,-32768,-32768,-32768,-32768,
-32768,-32768,    48,    89,-32768,    28,-32768,-32768,    28,   106,
  1376,  1376,-32768,-32768,-32768,   263,   255,   223,-32768,-32768,
   261,-32768,-32768,-32768,   274,   222,   229,-32768,   261,-32768,
-32768,   436,   203,-32768,    28,    33,    89,-32768,   -24,   108,
   483,   105,   218,   -39,   195,   235,-32768,-32768,   483,   108,
   224,   228,   302,  1376,   264,    73,   261,-32768,    24,    39,
   298,   196,   -25,-32768,   195,   251,   265,-32768,-32768,-32768,
   198,-32768,   195,   252,  1309,   195,  1309,  1309,  1309,   259,
   267,   277,   195,-32768,   195,   195,    55,   275,   276,-32768,
   252,  1309,   276,-32768,  1309,-32768,  1309,   347,  1309,   268,
-32768,-32768,-32768,-32768,  1309,  1309,  1309,   280,   195,   195,
   195,   195,   282,    62,-32768,   302,    28,    30,-32768,-32768,
   302,-32768,  1376,-32768,-32768,   141,   198,-32768,   284,    73,
-32768,   307,-32768,  1403,-32768,  1448,    95,-32768,-32768,   273,
-32768,   279,-32768,   195,   285,  1181,   195,-32768,   317,   314,
-32768,  1309,  1309,  1309,  1309,  1309,   114,-32768,-32768,   226,
   576,   297,   643,   267,-32768,-32768,-32768,-32768,-32768,   347,
  1309,   195,-32768,   142,-32768,   315,   751,-32768,   777,   299,
    28,   287,    31,    31,   304,   609,   677,-32768,-32768,   119,
  1067,   295,   295,-32768,-32768,-32768,-32768,-32768,  1309,  1309,
  1309,  1309,  1309,  1309,  1309,  1309,  1309,  1309,  1309,  1309,
  1309,  1309,  1309,  1309,  1309,  1309,  1309,  1309,-32768,-32768,
   133,   291,-32768,-32768,   120,   302,   293,-32768,-32768,-32768,
-32768,    27,   306,    28,-32768,-32768,-32768,-32768,-32768,   363,
   363,  1309,  1309,   195,-32768,   300,-32768,-32768,-32768,-32768,
-32768,    98,-32768,   609,-32768,  1309,-32768,-32768,   311,   815,
   313,  1067,   295,   295,  1309,  1309,-32768,  1309,  1309,  1309,
  1309,  1309,  1309,  1309,  1309,  1309,  1309,  1309,  1309,  1309,
  1309,  1309,  1309,  1309,-32768,-32768,   316,  1309,-32768,-32768,
   312,   328,-32768,   609,-32768,   319,-32768,-32768,-32768,-32768,
   140,  1233,   252,   347,-32768,-32768,-32768,  1309,-32768,    59,
   119,   323,-32768,-32768,  1273,  1273,     8,   848,  1067,   237,
   237,   237,   237,   237,   237,   295,   295,   295,   295,     8,
     8,     8,     8,   303,   337,   334,  1257,   342,   330,    73,
   225,-32768,   363,-32768,-32768,    28,   329,   133,   336,    28,
-32768,   195,-32768,   609,   609,-32768,  1309,-32768,   180,  1181,
-32768,   609,    25,   252,  1309,-32768,  1273,  1273,   108,     8,
  1067,   237,   237,   237,   237,   237,   237,   295,   295,   295,
   295,     8,     8,     8,     8,   303,   108,   164,   142,   609,
   346,   312,   352,-32768,   142,  1157,   483,   483,   353,-32768,
-32768,-32768,-32768,  1309,-32768,-32768,-32768,-32768,   358,-32768,
   291,-32768,-32768,   364,-32768,   366,   302,-32768,-32768,   267,
   326,   267,   195,-32768,   105,-32768,   609,   357,   195,-32768,
   407,-32768,   609,   148,   109,   381,   276,-32768,   267,   374,
   414,   234,   207,   287,   376,-32768,   380,-32768,   358,   369,
-32768,-32768,   383,   336,   384,-32768,    28,   110,-32768,-32768,
-32768,-32768,-32768,   240,-32768,  1309,   430,  1309,   394,-32768,
-32768,-32768,-32768,-32768,-32768,  1309,   434,  1309,   399,-32768,
   353,-32768,   267,-32768,   400,-32768,   438,    33,   -24,-32768,
  1309,  1309,   108,   874,   439,   912,   195,   483,   970,   446,
  1008,-32768,-32768,-32768,   336,  1309,   195,   410,   198,   609,
  1034,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   609,
-32768,   195,   195,  1309,   108,   108,   483,   483,-32768,-32768,
   609,   467,   479,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,    -1,-32768,-32768,   466,-32768,-32768,-32768,
-32768,   -46,   459,   187,-32768,-32768,-32768,   390,-32768,-32768,
    86,-32768,-32768,    -9,   368,   -12,-32768,-32768,-32768,    15,
  -119,   -47,-32768,-32768,-32768,-32768,  -278,-32768,-32768,    92,
-32768,  -175,-32768,   431,   -20,    93,   -94,-32768,   -70,    97,
-32768,   214,  -104,   -17,-32768,  -179,-32768,-32768,   388,   423,
-32768,-32768,   321,-32768,-32768,-32768,-32768,   344,-32768,   -38,
-32768,   308,   348,-32768,   -98,    36,-32768,    91,  -228,-32768,
  -172,   429,-32768,   -73,-32768,  -135,-32768,   121,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   -72,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  -126,    96,-32768,     2,  -430,
-32768,-32768,   186,  -142,-32768,  -210,   305,   260,-32768,-32768,
   -99,-32768,  -173,-32768,  -340,   201,-32768,    87,   318,-32768
};


#define	YYLAST		1528


static const short yytable[] = {     7,
   109,   173,   110,   176,   131,   203,   235,   288,   283,   173,
   238,   193,   287,   208,    42,   236,   219,   306,   294,   353,
   294,   373,   413,   227,   108,   228,   229,   463,   507,    78,
   240,   133,   207,   178,   115,    23,    84,    53,    84,   202,
    55,    92,   120,    98,   491,    16,   130,    11,    11,   255,
   256,   257,   258,   134,    57,   135,   474,   179,    53,   363,
   356,    55,     1,    58,    99,   259,   190,   102,   104,    59,
   194,    60,    85,   328,    85,    67,   129,   136,   401,    78,
    61,    -2,   137,   138,   309,   290,   321,   315,    24,  -127,
   196,   139,    60,   123,    68,   364,   124,   140,   282,   -93,
     4,   141,   260,   -93,     5,   344,    15,   374,    12,   125,
   507,     4,   355,   398,   133,     5,   406,   325,   197,    71,
    72,   230,   464,   508,   479,    58,   528,   261,   529,   350,
   465,    59,   231,    74,    75,   284,   134,     9,   135,    10,
   262,   263,   466,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   462,   326,   274,   275,   276,   277,   278,
   136,    49,   420,   525,   526,   137,   138,    11,   327,   421,
   133,    49,   302,   303,   139,   281,    49,    11,     4,   328,
   140,    16,   103,   496,   141,   230,   397,   302,   303,   130,
   130,   372,   134,   329,   135,   330,   331,   332,   333,   334,
   335,   336,   337,   338,   339,    11,   459,   340,   341,   342,
   343,   344,    11,   140,   140,    44,   136,   285,   141,    45,
    40,   137,   138,    41,   538,   406,   539,   461,   467,   325,
   139,    53,    15,    54,    55,    53,   140,    19,    55,   361,
   141,    56,    20,    16,   488,   423,    39,   489,    57,   535,
   536,    43,    57,   -34,   429,   551,   552,    58,   470,    46,
    47,    58,    48,    59,    49,    60,   326,    59,    52,    60,
    40,    93,   447,   448,    61,   497,    95,    96,    61,   112,
   345,   500,   111,   456,   457,   458,   114,    12,    84,   118,
   122,   328,   486,   119,   416,   193,   177,   -93,   183,   191,
   184,   -93,   328,   185,   513,   329,   187,   330,   331,   332,
   333,   334,   335,   336,   337,   338,   339,   200,   204,   340,
   341,   342,   343,   344,   336,   337,   338,   339,   209,   205,
   340,   341,   342,   343,   344,   224,    53,   130,   306,    55,
   226,   234,   230,   254,   249,  -178,   515,   289,   291,   307,
   316,   318,   357,    57,   531,   308,   173,   173,   173,   149,
   328,   125,    58,   519,   347,   362,   360,   395,    59,   522,
    60,   399,   150,   367,   410,   424,   241,   212,   417,    61,
   426,   153,   407,   455,   453,   514,   520,   518,   340,   341,
   342,   343,   344,   449,   217,   454,   220,   221,   223,   468,
   344,   471,   154,   472,   532,   475,   476,   481,   485,   156,
   348,   237,   482,   213,   239,   158,   223,   159,   247,   160,
   161,   162,   163,   242,   251,   252,   253,   214,   499,   504,
   510,   512,   397,   521,   215,   523,   216,   575,    67,   530,
   -55,   533,   534,   540,   541,   543,   544,   581,   564,   555,
   548,   557,   553,   560,   569,   -55,   562,    68,   173,    69,
   -55,   558,   589,   590,   565,   314,   593,    70,   566,   573,
   583,   320,   223,   322,   323,   324,   577,   582,   594,    17,
    37,   121,    71,    72,   477,   511,    73,   173,   173,   201,
   354,   148,   478,    97,   579,   149,    74,    75,   480,   585,
   550,   586,   587,   400,   588,   483,   195,   117,   150,   568,
   490,   151,   310,   152,   295,   549,   517,   153,   375,   376,
   377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
   387,   388,   389,   390,   391,   392,   393,   394,   154,   300,
   155,   189,   563,   301,   492,   156,   498,   460,   366,   157,
   452,   158,   509,   159,     0,   160,   161,   162,   163,   164,
     0,   414,   415,   165,     0,     0,   371,     0,     0,     0,
   166,     0,   167,     0,     0,   422,     0,     0,     0,   325,
     0,     0,     0,     0,   427,   428,     0,   430,   431,   432,
   433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
   443,   444,   445,   446,     0,     0,     0,   450,     0,     0,
     0,     0,   325,   346,     0,     0,   326,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   247,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   328,     0,     0,     0,     0,   325,     0,     0,   326,
     0,     0,     0,     0,     0,   329,   247,   330,   331,   332,
   333,   334,   335,   336,   337,   338,   339,     0,     0,   340,
   341,   342,   343,   344,   328,     0,   487,     0,     0,   314,
   325,     0,     0,   326,   493,     0,     0,     0,   329,     0,
   330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     0,     0,   340,   341,   342,   343,   344,   348,   328,     0,
     0,     0,     0,     0,     0,     0,     0,   326,     0,     0,
     0,     0,   329,   247,   330,   331,   332,   333,   334,   335,
   336,   337,   338,   339,     0,     0,   340,   341,   342,   343,
   344,   368,   328,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   325,     0,   329,     0,   330,   331,
   332,   333,   334,   335,   336,   337,   338,   339,     0,     0,
   340,   341,   342,   343,   344,     0,     0,     0,     0,     0,
   325,     0,     0,     0,     0,   554,     0,   556,     0,     0,
     0,   326,     0,     0,     0,   559,     0,   561,     0,     0,
     0,     0,     0,     0,     0,   358,     0,     0,     0,     0,
   570,   571,     0,     0,     0,     0,   328,   326,   325,     0,
     0,     0,     0,     0,     0,   580,     0,     0,     0,     0,
   329,   359,   330,   331,   332,   333,   334,   335,   336,   337,
   338,   339,   328,   591,   340,   341,   342,   343,   344,     0,
     0,   325,     0,     0,     0,   326,   329,     0,   330,   331,
   332,   333,   334,   335,   336,   337,   338,   339,     0,   425,
   340,   341,   342,   343,   344,     0,     0,   325,     0,     0,
   328,     0,     0,     0,     0,     0,     0,     0,   326,     0,
     0,     0,     0,     0,   329,     0,   330,   331,   332,   333,
   334,   335,   336,   337,   338,   339,     0,     0,   340,   341,
   342,   343,   344,   328,   326,   325,     0,     0,     0,     0,
     0,     0,     0,    40,     0,     0,     0,   329,   572,   330,
   331,   332,   333,   334,   335,   336,   337,   338,   339,   328,
     0,   340,   341,   342,   343,   344,     0,     0,     0,     0,
     0,     0,   326,   329,     0,   330,   331,   332,   333,   334,
   335,   336,   337,   338,   339,     0,   574,   340,   341,   342,
   343,   344,     0,   325,     0,     0,     0,   328,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   329,     0,   330,   331,   332,   333,   334,   335,   336,
   337,   338,   339,     0,     0,   340,   341,   342,   343,   344,
   326,   325,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   576,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   328,     0,   325,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   326,   329,
     0,   330,   331,   332,   333,   334,   335,   336,   337,   338,
   339,     0,   578,   340,   341,   342,   343,   344,     0,     0,
   325,     0,     0,   328,   326,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   329,   584,   330,
   331,   332,   333,   334,   335,   336,   337,   338,   339,   328,
     0,   340,   341,   342,   343,   344,     0,   326,     0,     0,
     0,     0,     0,   329,     0,   330,   331,   332,   333,   334,
   335,   336,   337,   338,   339,     0,     0,   340,   341,   342,
   343,   344,   328,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   330,   331,
   332,   333,   334,   335,   336,   337,   338,   339,     0,     0,
   340,   341,   342,   343,   344,   148,     0,     0,     0,   149,
     0,     0,     0,     0,     0,     0,   501,     0,     0,     0,
     0,     0,   150,     0,     0,   151,     0,   152,     0,     0,
     0,   153,     0,   149,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   150,     0,     0,     0,
     0,   212,   154,     0,   155,   153,     0,     0,     0,   156,
     0,     0,     0,   157,     0,   158,     0,   159,     0,   160,
   161,   162,   163,   164,     0,     0,   154,   165,     0,     0,
     0,     0,     0,   156,   166,   149,   167,   213,     0,   158,
     0,   159,     0,   160,   161,   162,   163,   164,   150,     0,
   311,   214,   241,   212,     0,     0,     0,   153,   215,   149,
   216,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   150,     0,     0,     0,     0,   212,   154,     0,
     0,   153,     0,     0,     0,   156,     0,     0,     0,   213,
     0,   158,     0,   159,     0,   160,   161,   162,   163,   164,
     0,     0,   154,   214,     0,     0,     0,     0,     0,   156,
   215,   149,   216,   213,   473,   158,     0,   159,     0,   160,
   161,   162,   163,   164,   150,     0,     0,   214,   328,   212,
     0,     0,     0,   153,   215,     0,   216,     0,     0,     0,
     0,     0,     0,     0,   330,   331,   332,   333,   334,   335,
   336,   337,   338,   339,   154,     0,   340,   341,   342,   343,
   344,   156,     0,     0,     0,   213,     0,   158,   -76,   159,
   -76,   160,   161,   162,   163,   164,     0,     0,     0,   214,
     0,     0,     0,     0,     0,   -76,   215,   -76,   216,    69,
   -76,     0,     0,     0,     0,     0,     0,    70,    26,     0,
    27,     0,   -17,    53,     0,     0,    55,     0,     0,     0,
     0,     0,   -76,   -76,     0,    28,    73,     0,     0,     0,
    57,     0,   -19,     0,     0,    29,   -76,   -76,     0,    58,
     0,    30,    31,     0,     0,    59,    32,    60,     0,     0,
     0,    33,   -33,    26,   196,    27,    61,   -17,    53,    34,
     0,    55,     0,     0,     0,     0,     0,     0,     0,     0,
    28,     0,     0,     0,     0,    57,    26,   -19,    27,     0,
    29,     0,     0,     0,    58,     0,    30,    31,     0,     0,
    59,    32,    60,    28,     0,     0,    33,   -33,     0,     0,
   -19,    61,     0,    29,    34,     0,     0,     0,     0,    30,
    31,     0,     0,     0,    32,     0,     0,     0,     0,    33,
   -33,     0,     0,     0,     0,     0,     0,    34
};

static const short yycheck[] = {     1,
    74,   101,    75,   102,    99,   125,   149,   187,   181,   109,
   153,   116,   186,   133,    24,   151,   136,   197,   194,   230,
   196,   250,   301,   143,    72,   145,   146,   368,   459,    42,
   157,     7,   131,    73,    81,    24,    15,    11,    15,    65,
    14,    51,    89,    64,    20,    19,    71,    73,    73,   169,
   170,   171,   172,    29,    28,    31,   397,    97,    11,    29,
   234,    14,    60,    37,    66,     4,   114,    69,    70,    43,
   117,    45,    51,    66,    51,     3,    97,    53,    52,    92,
    54,     0,    58,    59,   204,   190,   213,   207,    77,    68,
    52,    67,    45,    95,    22,    65,    64,    73,    69,    73,
    73,    77,    41,    77,    77,    98,    77,   250,    27,    77,
   541,    73,   232,   286,     7,    77,   292,     4,   120,    47,
    48,    67,    64,   464,   403,    37,    18,    66,    20,   224,
    72,    43,    78,    61,    62,   183,    29,    77,    31,    64,
    79,    80,   371,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,   364,    41,    94,    95,    96,    97,    98,
    53,    67,    65,    16,    17,    58,    59,    73,    55,    72,
     7,    67,    78,    79,    67,   177,    67,    73,    73,    66,
    73,    19,    77,    20,    77,    67,    67,    78,    79,    71,
    71,    73,    29,    80,    31,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    73,    67,    94,    95,    96,
    97,    98,    73,    73,    73,    29,    53,    77,    77,    33,
    76,    58,    59,    79,    18,   401,    20,   363,   371,     4,
    67,    11,    77,    13,    14,    11,    73,    64,    14,   241,
    77,    21,    46,    19,    65,   318,    77,    68,    28,    16,
    17,    40,    28,    50,   327,    16,    17,    37,   378,    10,
    30,    37,    50,    43,    67,    45,    41,    43,    88,    45,
    76,    76,   345,   346,    54,   449,    67,    67,    54,    25,
    55,   455,    20,   357,   358,   359,    64,    27,    15,    68,
    88,    66,   412,    65,   304,   400,    79,    73,    64,    36,
    77,    77,    66,    76,   477,    80,     5,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    20,    68,    94,
    95,    96,    97,    98,    88,    89,    90,    91,    77,    65,
    94,    95,    96,    97,    98,    77,    11,    71,   518,    14,
    64,    67,    67,    64,    77,    64,    21,    64,    42,    77,
    34,    38,    38,    28,   497,    77,   456,   457,   458,    13,
    66,    77,    37,   483,    68,    79,    68,    77,    43,   489,
    45,    79,    26,    70,    12,    65,    30,    31,    79,    54,
    68,    35,    77,    65,    73,   480,   485,   482,    94,    95,
    96,    97,    98,    78,   135,    68,   137,   138,   139,    77,
    98,    65,    56,    70,   499,    64,    77,    79,   410,    63,
    65,   152,    77,    67,   155,    69,   157,    71,   159,    73,
    74,    75,    76,    77,   165,   166,   167,    81,    77,    77,
    73,    68,    67,    77,    88,    29,    90,   557,     3,    59,
     5,    68,    29,    68,    65,    77,    64,   567,   543,    20,
    67,    58,   525,    20,   549,    20,    58,    22,   558,    24,
    25,   535,   582,   583,    65,   206,     0,    32,    31,    31,
   569,   212,   213,   214,   215,   216,    31,    68,     0,    14,
    22,    92,    47,    48,   399,   471,    51,   587,   588,   122,
   231,     9,   401,    63,   565,    13,    61,    62,   406,   572,
   518,   574,   576,   290,   578,   409,   119,    85,    26,   548,
   420,    29,   205,    31,   194,   517,   481,    35,   259,   260,
   261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,   278,    56,   196,
    58,   113,   541,   196,   424,    63,   451,   362,   244,    67,
   350,    69,   466,    71,    -1,    73,    74,    75,    76,    77,
    -1,   302,   303,    81,    -1,    -1,   249,    -1,    -1,    -1,
    88,    -1,    90,    -1,    -1,   316,    -1,    -1,    -1,     4,
    -1,    -1,    -1,    -1,   325,   326,    -1,   328,   329,   330,
   331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
   341,   342,   343,   344,    -1,    -1,    -1,   348,    -1,    -1,
    -1,    -1,     4,    38,    -1,    -1,    41,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   368,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    66,    -1,    -1,    -1,    -1,     4,    -1,    -1,    41,
    -1,    -1,    -1,    -1,    -1,    80,   397,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    -1,    -1,    94,
    95,    96,    97,    98,    66,    -1,   417,    -1,    -1,   420,
     4,    -1,    -1,    41,   425,    -1,    -1,    -1,    80,    -1,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    -1,    -1,    94,    95,    96,    97,    98,    65,    66,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,
    -1,    -1,    80,   464,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    -1,    -1,    94,    95,    96,    97,
    98,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     4,    -1,    80,    -1,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    -1,    -1,
    94,    95,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,
     4,    -1,    -1,    -1,    -1,   526,    -1,   528,    -1,    -1,
    -1,    41,    -1,    -1,    -1,   536,    -1,   538,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,
   551,   552,    -1,    -1,    -1,    -1,    66,    41,     4,    -1,
    -1,    -1,    -1,    -1,    -1,   566,    -1,    -1,    -1,    -1,
    80,    55,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    66,   584,    94,    95,    96,    97,    98,    -1,
    -1,     4,    -1,    -1,    -1,    41,    80,    -1,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    -1,    55,
    94,    95,    96,    97,    98,    -1,    -1,     4,    -1,    -1,
    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
    -1,    -1,    -1,    -1,    80,    -1,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
    96,    97,    98,    66,    41,     4,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    76,    -1,    -1,    -1,    80,    55,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    66,
    -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,    -1,
    -1,    -1,    41,    80,    -1,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    -1,    55,    94,    95,    96,
    97,    98,    -1,     4,    -1,    -1,    -1,    66,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    -1,    -1,    94,    95,    96,    97,    98,
    41,     4,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    66,    -1,     4,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    80,
    -1,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    -1,    55,    94,    95,    96,    97,    98,    -1,    -1,
     4,    -1,    -1,    66,    41,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    55,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    66,
    -1,    94,    95,    96,    97,    98,    -1,    41,    -1,    -1,
    -1,    -1,    -1,    80,    -1,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
    97,    98,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    -1,    -1,
    94,    95,    96,    97,    98,     9,    -1,    -1,    -1,    13,
    -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    -1,    -1,
    -1,    -1,    26,    -1,    -1,    29,    -1,    31,    -1,    -1,
    -1,    35,    -1,    13,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    26,    -1,    -1,    -1,
    -1,    31,    56,    -1,    58,    35,    -1,    -1,    -1,    63,
    -1,    -1,    -1,    67,    -1,    69,    -1,    71,    -1,    73,
    74,    75,    76,    77,    -1,    -1,    56,    81,    -1,    -1,
    -1,    -1,    -1,    63,    88,    13,    90,    67,    -1,    69,
    -1,    71,    -1,    73,    74,    75,    76,    77,    26,    -1,
    80,    81,    30,    31,    -1,    -1,    -1,    35,    88,    13,
    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    26,    -1,    -1,    -1,    -1,    31,    56,    -1,
    -1,    35,    -1,    -1,    -1,    63,    -1,    -1,    -1,    67,
    -1,    69,    -1,    71,    -1,    73,    74,    75,    76,    77,
    -1,    -1,    56,    81,    -1,    -1,    -1,    -1,    -1,    63,
    88,    13,    90,    67,    68,    69,    -1,    71,    -1,    73,
    74,    75,    76,    77,    26,    -1,    -1,    81,    66,    31,
    -1,    -1,    -1,    35,    88,    -1,    90,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    56,    -1,    94,    95,    96,    97,
    98,    63,    -1,    -1,    -1,    67,    -1,    69,     3,    71,
     5,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
    -1,    -1,    -1,    -1,    -1,    20,    88,    22,    90,    24,
    25,    -1,    -1,    -1,    -1,    -1,    -1,    32,     6,    -1,
     8,    -1,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
    -1,    -1,    47,    48,    -1,    23,    51,    -1,    -1,    -1,
    28,    -1,    30,    -1,    -1,    33,    61,    62,    -1,    37,
    -1,    39,    40,    -1,    -1,    43,    44,    45,    -1,    -1,
    -1,    49,    50,     6,    52,     8,    54,    10,    11,    57,
    -1,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    23,    -1,    -1,    -1,    -1,    28,     6,    30,     8,    -1,
    33,    -1,    -1,    -1,    37,    -1,    39,    40,    -1,    -1,
    43,    44,    45,    23,    -1,    -1,    49,    50,    -1,    -1,
    30,    54,    -1,    33,    57,    -1,    -1,    -1,    -1,    39,
    40,    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,    49,
    50,    -1,    -1,    -1,    -1,    -1,    -1,    57
};

#line 352 "/usr/share/bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_MCC_Parser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  };
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL 
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_MCC_Parser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_MCC_Parser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_MCC_Parser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_MCC_Parser_CHAR = (token), YY_MCC_Parser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_MCC_Parser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_MCC_Parser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_MCC_Parser_PURE
/* UNPURE */
#define YYLEX           YY_MCC_Parser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_MCC_Parser_CHAR;                      /*  the lookahead symbol        */
YY_MCC_Parser_STYPE      YY_MCC_Parser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_MCC_Parser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_MCC_Parser_LSP_NEEDED
YY_MCC_Parser_LTYPE YY_MCC_Parser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_MCC_Parser_LSP_NEEDED
#define YYLEX           YY_MCC_Parser_LEX(&YY_MCC_Parser_LVAL, &YY_MCC_Parser_LLOC)
#else
#define YYLEX           YY_MCC_Parser_LEX(&YY_MCC_Parser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_MCC_Parser_DEBUG != 0
int YY_MCC_Parser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_MCC_Parser_CLASS::
#endif
     YY_MCC_Parser_PARSE(YY_MCC_Parser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_MCC_Parser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_MCC_Parser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_MCC_Parser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_MCC_Parser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_MCC_Parser_LSP_NEEDED
  YY_MCC_Parser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_MCC_Parser_LTYPE *yyls = yylsa;
  YY_MCC_Parser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_MCC_Parser_PURE
  int YY_MCC_Parser_CHAR;
  YY_MCC_Parser_STYPE YY_MCC_Parser_LVAL;
  int YY_MCC_Parser_NERRS;
#ifdef YY_MCC_Parser_LSP_NEEDED
  YY_MCC_Parser_LTYPE YY_MCC_Parser_LLOC;
#endif
#endif

  YY_MCC_Parser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_MCC_Parser_DEBUG != 0
  if (YY_MCC_Parser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_MCC_Parser_NERRS = 0;
  YY_MCC_Parser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_MCC_Parser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_MCC_Parser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_MCC_Parser_LSP_NEEDED
      YY_MCC_Parser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_MCC_Parser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_MCC_Parser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  YY_MCC_Parser_ERROR("parser stack overflow");
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_MCC_Parser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_MCC_Parser_LSP_NEEDED
      yyls = (YY_MCC_Parser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_MCC_Parser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_MCC_Parser_DEBUG != 0
      if (YY_MCC_Parser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_MCC_Parser_DEBUG != 0
  if (YY_MCC_Parser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_MCC_Parser_CHAR == YYEMPTY)
    {
#if YY_MCC_Parser_DEBUG != 0
      if (YY_MCC_Parser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_MCC_Parser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_MCC_Parser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_MCC_Parser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_MCC_Parser_DEBUG != 0
      if (YY_MCC_Parser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_MCC_Parser_CHAR);

#if YY_MCC_Parser_DEBUG != 0
      if (YY_MCC_Parser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_MCC_Parser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_MCC_Parser_CHAR, YY_MCC_Parser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_MCC_Parser_DEBUG != 0
  if (YY_MCC_Parser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_MCC_Parser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_MCC_Parser_CHAR != YYEOF)
    YY_MCC_Parser_CHAR = YYEMPTY;

  *++yyvsp = YY_MCC_Parser_LVAL;
#ifdef YY_MCC_Parser_LSP_NEEDED
  *++yylsp = YY_MCC_Parser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_MCC_Parser_DEBUG != 0
  if (YY_MCC_Parser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "/usr/share/bison++/bison.cc"

  switch (yyn) {

case 1:
#line 177 "parser/mocc.y"
{ this->setRoot(yyval.stored_def); ;
    break;}
case 2:
#line 182 "parser/mocc.y"
{ yyval.stored_def = newAST_StoredDefinition(yyvsp[0].class_list,yyvsp[-1].string); ;
    break;}
case 3:
#line 186 "parser/mocc.y"
{ yyval.string = newAST_StringNull(); ;
    break;}
case 4:
#line 187 "parser/mocc.y"
{ yyval.string = yyvsp[-1].string; ;
    break;}
case 5:
#line 191 "parser/mocc.y"
{ yyval.string = newAST_StringNull(); ;
    break;}
case 6:
#line 192 "parser/mocc.y"
{ yyval.string = yyvsp[0].string; ;
    break;}
case 7:
#line 196 "parser/mocc.y"
{ yyval.string = newAST_String(yyvsp[0].string); ;
    break;}
case 8:
#line 197 "parser/mocc.y"
{ yyval.string = newAST_DotString(yyvsp[0].string); ;
    break;}
case 9:
#line 198 "parser/mocc.y"
{ yyval.string = AST_StringDotAppend(yyvsp[-2].string,yyvsp[0].string); ;
    break;}
case 10:
#line 202 "parser/mocc.y"
{ yyval.class_list = newAST_ClassList(); ;
    break;}
case 11:
#line 203 "parser/mocc.y"
{ yyval.class_list = AST_ListAppend(yyvsp[-1].class_list,yyvsp[0].model); ;
    break;}
case 12:
#line 207 "parser/mocc.y"
{ yyval.model = AST_Class_SetFinal(yyvsp[-1].model,yyvsp[-2].opt);;
    break;}
case 13:
#line 211 "parser/mocc.y"
{ yyval.model = AST_Class_SetPrefixEncapsulated(yyvsp[0].model,yyvsp[-1].class_prefix,yyvsp[-2].opt); ;
    break;}
case 14:
#line 215 "parser/mocc.y"
{ yyval.opt = false; ;
    break;}
case 15:
#line 216 "parser/mocc.y"
{ yyval.opt = true; ;
    break;}
case 16:
#line 220 "parser/mocc.y"
{ yyval.class_prefix = AST_ClassPrefix_AddPartial(yyvsp[-1].opt,yyvsp[0].class_prefix); ;
    break;}
case 17:
#line 224 "parser/mocc.y"
{ yyval.opt = false; ;
    break;}
case 18:
#line 225 "parser/mocc.y"
{ yyval.opt = true; ;
    break;}
case 19:
#line 229 "parser/mocc.y"
{ yyval.class_prefix = AST_ClassPrefix_None(); ;
    break;}
case 20:
#line 230 "parser/mocc.y"
{ yyval.class_prefix = AST_ClassPrefix_Pure(yyvsp[0].opt); ;
    break;}
case 21:
#line 231 "parser/mocc.y"
{ yyval.class_prefix = AST_ClassPrefix_Impure(yyvsp[0].opt); ;
    break;}
case 22:
#line 235 "parser/mocc.y"
{ yyval.opt = false; ;
    break;}
case 23:
#line 236 "parser/mocc.y"
{ yyval.opt = true; ;
    break;}
case 24:
#line 240 "parser/mocc.y"
{ yyval.class_prefix = AST_ClassPrefix_Class(); ;
    break;}
case 25:
#line 241 "parser/mocc.y"
{ yyval.class_prefix = AST_ClassPrefix_Model(); ;
    break;}
case 26:
#line 242 "parser/mocc.y"
{ yyval.class_prefix = AST_ClassPrefix_Record(yyvsp[-1].opt); ;
    break;}
case 27:
#line 243 "parser/mocc.y"
{ yyval.class_prefix = AST_ClassPrefix_Block(); ;
    break;}
case 28:
#line 244 "parser/mocc.y"
{ yyval.class_prefix = AST_ClassPrefix_Connector(yyvsp[-1].opt); ;
    break;}
case 29:
#line 245 "parser/mocc.y"
{ yyval.class_prefix = AST_ClassPrefix_Type(); ;
    break;}
case 30:
#line 246 "parser/mocc.y"
{ yyval.class_prefix = AST_ClassPrefix_Package(); ;
    break;}
case 31:
#line 247 "parser/mocc.y"
{ yyval.class_prefix = AST_ClassPrefix_Function(yyvsp[-1].class_prefix); ;
    break;}
case 32:
#line 248 "parser/mocc.y"
{ yyval.class_prefix = AST_ClassPrefix_Operator(); ;
    break;}
case 33:
#line 252 "parser/mocc.y"
{ yyval.opt = false; ;
    break;}
case 34:
#line 253 "parser/mocc.y"
{ yyval.opt = true; ;
    break;}
case 35:
#line 257 "parser/mocc.y"
{ yyval.opt = false; ;
    break;}
case 36:
#line 258 "parser/mocc.y"
{ yyval.opt = true; ;
    break;}
case 37:
#line 262 "parser/mocc.y"
{ yyval.model = newAST_Class(yyvsp[-4].string,yyvsp[-2].composition); ;
    break;}
case 38:
#line 263 "parser/mocc.y"
{ yyval.model = newAST_ClassModification(yyvsp[-6].string,yyvsp[-4].type_prefix,yyvsp[-3].string,yyvsp[-2].expression_list,yyvsp[-1].argument_list); ;
    break;}
case 39:
#line 264 "parser/mocc.y"
{ yyval.model = newAST_ClassEnumeration(yyvsp[-6].string,yyvsp[-2].string_list); ;
    break;}
case 40:
#line 265 "parser/mocc.y"
{ yyval.model = newAST_ClassDerivation(yyvsp[-9].string,yyvsp[-5].string,AST_ListPrepend(yyvsp[-2].string_list,yyvsp[-3].string)); ;
    break;}
case 41:
#line 266 "parser/mocc.y"
{ yyval.model = newAST_ClassExtends(yyvsp[-5].string,yyvsp[-2].composition); ;
    break;}
case 42:
#line 270 "parser/mocc.y"
{ yyval.string_list = newAST_StringList(); ;
    break;}
case 43:
#line 271 "parser/mocc.y"
{ yyval.string_list = AST_ListAppend(yyvsp[-2].string_list,yyvsp[0].string); ;
    break;}
case 44:
#line 275 "parser/mocc.y"
{ yyval.composition = AST_Composition_SetExternalAnnotation(yyvsp[-2].composition,yyvsp[-1].external_funciton_call,yyvsp[0].argument_list); ;
    break;}
case 45:
#line 279 "parser/mocc.y"
{ yyval.external_funciton_call = newAST_ExternalCall(); ;
    break;}
case 46:
#line 280 "parser/mocc.y"
{ yyval.external_funciton_call = newAST_ExternalCall(yyvsp[-3].string,NULL,yyvsp[-2].expression,yyvsp[-1].argument_list); ;
    break;}
case 47:
#line 281 "parser/mocc.y"
{ yyval.external_funciton_call = newAST_ExternalCall(yyvsp[-5].string,yyvsp[-4].component_ref,yyvsp[-2].expression,yyvsp[-1].argument_list); ;
    break;}
case 48:
#line 285 "parser/mocc.y"
{ yyval.string = newAST_StringNull(); ;
    break;}
case 49:
#line 286 "parser/mocc.y"
{ yyval.string = newAST_String(yyvsp[0].string); ;
    break;}
case 50:
#line 290 "parser/mocc.y"
{yyval.expression = NULL;;
    break;}
case 51:
#line 291 "parser/mocc.y"
{yyval.expression = newAST_Expression_Call(yyvsp[-3].string,NULL,yyvsp[-1].expression_list);;
    break;}
case 52:
#line 292 "parser/mocc.y"
{yyval.expression = newAST_Expression_Call(yyvsp[-2].string,NULL,NULL);;
    break;}
case 53:
#line 296 "parser/mocc.y"
{ yyval.argument_list = newAST_ArgumentList(); ;
    break;}
case 54:
#line 297 "parser/mocc.y"
{ yyval.argument_list = yyvsp[-1].argument_list; ;
    break;}
case 55:
#line 301 "parser/mocc.y"
{ yyval.composition = newAST_Composition(); ;
    break;}
case 56:
#line 302 "parser/mocc.y"
{ yyval.composition = newAST_Composition(AST_ListPrepend(yyvsp[0].element_list,yyvsp[-2].element),newAST_CompositionElementList()); ;
    break;}
case 57:
#line 303 "parser/mocc.y"
{ yyval.composition = newAST_Composition(AST_ListPrepend(yyvsp[-2].element_list,yyvsp[-4].element), AST_ListPrepend(yyvsp[0].composition_element_list,yyvsp[-1].composition_element)); ;
    break;}
case 58:
#line 304 "parser/mocc.y"
{ yyval.composition = newAST_Composition(AST_ListPrepend(yyvsp[0].composition_element_list,yyvsp[-1].composition_element)); ;
    break;}
case 59:
#line 308 "parser/mocc.y"
{ yyval.string = newAST_StringNull(); ;
    break;}
case 60:
#line 309 "parser/mocc.y"
{ yyval.string = yyvsp[0].string; ;
    break;}
case 61:
#line 310 "parser/mocc.y"
{ /* $$ = AST_StringConcat($1,$3);*/ ;
    break;}
case 62:
#line 314 "parser/mocc.y"
{ yyval.string = yyvsp[0].string; ;
    break;}
case 63:
#line 315 "parser/mocc.y"
{ /* $$ = AST_StringConcat($1,$3); */;
    break;}
case 64:
#line 319 "parser/mocc.y"
{ yyval.element = AST_ImportToElement(yyvsp[0].import_clause); ;
    break;}
case 65:
#line 320 "parser/mocc.y"
{ yyval.element = AST_ExtendsToElement(yyvsp[0].extends_clause); ;
    break;}
case 66:
#line 321 "parser/mocc.y"
{ yyval.element = yyvsp[-1].element; ;
    break;}
case 67:
#line 325 "parser/mocc.y"
{ yyval.import_clause = newAST_ImportClause(newAST_String(yyvsp[-1].string)); ;
    break;}
case 68:
#line 329 "parser/mocc.y"
{yyval.string = yyvsp[0].string;
    break;}
case 69:
#line 330 "parser/mocc.y"
{yyval.string = yyvsp[-1].string;
    break;}
case 73:
#line 340 "parser/mocc.y"
{ yyval.string_list = AST_ListAppend(newAST_StringList(),yyvsp[0].string); ;
    break;}
case 74:
#line 341 "parser/mocc.y"
{ yyval.string_list = AST_ListPrepend(yyvsp[0].string_list,yyvsp[-2].string); ;
    break;}
case 75:
#line 345 "parser/mocc.y"
{ yyval.comment = newAST_Comment(yyvsp[-1].string,yyvsp[0].argument_list); ;
    break;}
case 76:
#line 349 "parser/mocc.y"
{ yyval.element_list = newAST_ElementList(); ;
    break;}
case 77:
#line 350 "parser/mocc.y"
{ yyval.element_list = AST_ListPrepend(yyvsp[0].element_list,yyvsp[-2].element);;
    break;}
case 78:
#line 354 "parser/mocc.y"
{ yyval.extends_clause = newAST_Element_ExtendsClause(yyvsp[-2].string); ;
    break;}
case 79:
#line 358 "parser/mocc.y"
{ yyval.opt = false; ;
    break;}
case 80:
#line 359 "parser/mocc.y"
{ yyval.opt = true; ;
    break;}
case 81:
#line 363 "parser/mocc.y"
{ yyval.opt = false; ;
    break;}
case 82:
#line 364 "parser/mocc.y"
{ yyval.opt = true; ;
    break;}
case 83:
#line 368 "parser/mocc.y"
{ yyval.opt = false; ;
    break;}
case 84:
#line 369 "parser/mocc.y"
{ yyval.opt = true; ;
    break;}
case 88:
#line 382 "parser/mocc.y"
{ yyval.element = yyvsp[0].element;;
    break;}
case 89:
#line 383 "parser/mocc.y"
{ yyval.element = yyvsp[0].element;;
    break;}
case 90:
#line 387 "parser/mocc.y"
{ yyval.element = newAST_Element_ClassWrapper(yyvsp[0].model); ;
    break;}
case 91:
#line 388 "parser/mocc.y"
{ yyval.element = AST_Element_ComponentToElement(yyvsp[0].component);;
    break;}
case 92:
#line 392 "parser/mocc.y"
{ yyval.component = newAST_Element_Component(yyvsp[0].declaration_list,yyvsp[-2].string,yyvsp[-3].type_prefix,yyvsp[-1].expression_list); ;
    break;}
case 93:
#line 396 "parser/mocc.y"
{ yyval.type_prefix = newAST_TypePrefix(); ;
    break;}
case 94:
#line 397 "parser/mocc.y"
{ yyval.type_prefix = yyvsp[0].type_prefix; ;
    break;}
case 95:
#line 398 "parser/mocc.y"
{ yyval.type_prefix = yyvsp[0].type_prefix; ;
    break;}
case 96:
#line 399 "parser/mocc.y"
{ yyval.type_prefix = AST_TypePrefixAdd(yyvsp[-1].type_prefix,yyvsp[0].type_prefix); ;
    break;}
case 97:
#line 400 "parser/mocc.y"
{ yyval.type_prefix = yyvsp[0].type_prefix; ;
    break;}
case 98:
#line 401 "parser/mocc.y"
{ yyval.type_prefix = AST_TypePrefixAdd(yyvsp[-1].type_prefix,yyvsp[0].type_prefix); ;
    break;}
case 99:
#line 402 "parser/mocc.y"
{ yyval.type_prefix = AST_TypePrefixAdd(yyvsp[-2].type_prefix,AST_TypePrefixAdd(yyvsp[-1].type_prefix,yyvsp[0].type_prefix)); ;
    break;}
case 100:
#line 406 "parser/mocc.y"
{ yyval.type_prefix = newAST_TypePrefix(TP_FLOW); ;
    break;}
case 101:
#line 407 "parser/mocc.y"
{ yyval.type_prefix = newAST_TypePrefix(TP_STREAM); ;
    break;}
case 102:
#line 411 "parser/mocc.y"
{ yyval.type_prefix = newAST_TypePrefix(TP_DISCRETE); ;
    break;}
case 103:
#line 412 "parser/mocc.y"
{ yyval.type_prefix = newAST_TypePrefix(TP_PARAMETER); ;
    break;}
case 104:
#line 413 "parser/mocc.y"
{ yyval.type_prefix = newAST_TypePrefix(TP_CONSTANT); ;
    break;}
case 105:
#line 417 "parser/mocc.y"
{ yyval.type_prefix = newAST_TypePrefix(TP_INPUT); ;
    break;}
case 106:
#line 418 "parser/mocc.y"
{ yyval.type_prefix = newAST_TypePrefix(TP_OUTPUT); ;
    break;}
case 107:
#line 422 "parser/mocc.y"
{ yyval.string = yyvsp[0].string;;
    break;}
case 108:
#line 426 "parser/mocc.y"
{ yyval.expression_list = newAST_ExpressionList(); ;
    break;}
case 109:
#line 427 "parser/mocc.y"
{ yyval.expression_list = yyvsp[0].expression_list;;
    break;}
case 110:
#line 431 "parser/mocc.y"
{ yyval.declaration_list = newAST_DeclarationList(yyvsp[0].declaration); ;
    break;}
case 111:
#line 432 "parser/mocc.y"
{ yyval.declaration_list = AST_ListPrepend(yyvsp[-2].declaration_list,yyvsp[0].declaration); ;
    break;}
case 112:
#line 436 "parser/mocc.y"
{ yyval.declaration = AST_Declaration_AddCondComment(yyvsp[-2].declaration,yyvsp[-1].expression,yyvsp[0].comment); ;
    break;}
case 113:
#line 440 "parser/mocc.y"
{ yyval.declaration = newAST_Declaration(yyvsp[-2].string,yyvsp[-1].expression_list,yyvsp[0].modification); ;
    break;}
case 114:
#line 444 "parser/mocc.y"
{ yyval.expression = newAST_Expression_Null();;
    break;}
case 115:
#line 445 "parser/mocc.y"
{ yyval.expression = yyvsp[0].expression; ;
    break;}
case 116:
#line 449 "parser/mocc.y"
{ yyval.composition_element_list = newAST_CompositionElementList();;
    break;}
case 117:
#line 450 "parser/mocc.y"
{ yyval.composition_element_list = AST_ListAppend(yyvsp[-1].composition_element_list,yyvsp[0].composition_element); ;
    break;}
case 118:
#line 454 "parser/mocc.y"
{ yyval.composition_element = newAST_CompositionElement(yyvsp[0].element_list);;
    break;}
case 119:
#line 455 "parser/mocc.y"
{ yyval.composition_element = newAST_CompositionElement(yyvsp[0].element_list);;
    break;}
case 120:
#line 456 "parser/mocc.y"
{ yyval.composition_element = newAST_CompositionElement(yyvsp[0].composition_eqs_algs);;
    break;}
case 121:
#line 460 "parser/mocc.y"
{ yyval.modification = newAST_ModificationNull(); ;
    break;}
case 122:
#line 461 "parser/mocc.y"
{ yyval.modification = yyvsp[0].modification; ;
    break;}
case 123:
#line 465 "parser/mocc.y"
{ yyval.modification = newAST_Modification_Class(yyvsp[-1].argument_list,yyvsp[0].expression); ;
    break;}
case 124:
#line 466 "parser/mocc.y"
{ yyval.modification = newAST_Modification_Equal(yyvsp[0].expression); ;
    break;}
case 125:
#line 467 "parser/mocc.y"
{ yyval.modification = newAST_Modification_Assign(yyvsp[0].expression); ;
    break;}
case 126:
#line 471 "parser/mocc.y"
{ yyval.argument_list = yyvsp[-1].argument_list; ;
    break;}
case 127:
#line 475 "parser/mocc.y"
{ yyval.argument_list = newAST_ArgumentList(); ;
    break;}
case 128:
#line 476 "parser/mocc.y"
{ yyval.argument_list = yyvsp[0].argument_list; ;
    break;}
case 129:
#line 480 "parser/mocc.y"
{ yyval.argument_list = AST_ListAppend(newAST_ArgumentList(),yyvsp[0].argument); ;
    break;}
case 130:
#line 481 "parser/mocc.y"
{ yyval.argument_list = AST_ListAppend(yyvsp[-2].argument_list,yyvsp[0].argument); ;
    break;}
case 131:
#line 485 "parser/mocc.y"
{ yyval.argument = yyvsp[0].argument; ;
    break;}
case 132:
#line 486 "parser/mocc.y"
{ yyval.argument = yyvsp[0].argument; ;
    break;}
case 133:
#line 490 "parser/mocc.y"
{ yyval.opt = false; ;
    break;}
case 134:
#line 491 "parser/mocc.y"
{ yyval.opt = true; ;
    break;}
case 135:
#line 495 "parser/mocc.y"
{ yyval.argument = AST_ArgumentSet(yyvsp[-2].opt,yyvsp[-1].opt,yyvsp[0].argument); ;
    break;}
case 136:
#line 496 "parser/mocc.y"
{ yyval.argument = AST_ArgumentSet(yyvsp[-2].opt,yyvsp[-1].opt,yyvsp[0].argument); ;
    break;}
case 137:
#line 500 "parser/mocc.y"
{ yyval.argument = newAST_ElementModification(yyvsp[-2].string,yyvsp[-1].modification); ;
    break;}
case 138:
#line 504 "parser/mocc.y"
{ yyval.argument = AST_ArgumentSetReplaceable(yyvsp[-1].argument /*,$3*/); ;
    break;}
case 139:
#line 505 "parser/mocc.y"
{ yyval.argument = AST_ArgumentSetReplaceable(yyvsp[-1].argument /*,$3*/); ;
    break;}
case 140:
#line 509 "parser/mocc.y"
{ yyval.expression = newAST_Expression_Null();;
    break;}
case 141:
#line 510 "parser/mocc.y"
{ yyval.expression = yyvsp[0].expression; ;
    break;}
case 142:
#line 514 "parser/mocc.y"
{ yyval.argument = newAST_Redeclaration(yyvsp[-2].opt,yyvsp[-1].opt,yyvsp[0].argument); ;
    break;}
case 143:
#line 518 "parser/mocc.y"
{ yyval.argument = yyvsp[0].argument; ;
    break;}
case 144:
#line 519 "parser/mocc.y"
{ yyval.argument = yyvsp[0].argument; ;
    break;}
case 145:
#line 523 "parser/mocc.y"
{ yyval.argument = yyvsp[0].argument; ;
    break;}
case 146:
#line 524 "parser/mocc.y"
{ yyval.argument = yyvsp[0].argument; ;
    break;}
case 147:
#line 528 "parser/mocc.y"
{ yyval.argument = newAST_ShortClass(yyvsp[-3].class_prefix,yyvsp[-2].string,yyvsp[0].short_class_exp); ;
    break;}
case 148:
#line 532 "parser/mocc.y"
{ yyval.short_class_exp = newAST_ShortClassExp(yyvsp[-4].type_prefix,yyvsp[-3].string,yyvsp[-2].expression_list,yyvsp[-1].argument_list); ;
    break;}
case 149:
#line 533 "parser/mocc.y"
{ yyval.short_class_exp = newAST_ShortClassExp_Enum(yyvsp[-2].string_list); ;
    break;}
case 150:
#line 537 "parser/mocc.y"
{ yyval.string_list = newAST_StringList(); ;
    break;}
case 151:
#line 538 "parser/mocc.y"
{ yyval.string_list = yyvsp[0].string_list; ;
    break;}
case 152:
#line 542 "parser/mocc.y"
{ yyval.string_list = AST_ListAppend(newAST_StringList(),yyvsp[0].string); ;
    break;}
case 153:
#line 543 "parser/mocc.y"
{ yyval.string_list = AST_ListAppend(yyvsp[-2].string_list,yyvsp[0].string); ;
    break;}
case 154:
#line 547 "parser/mocc.y"
{ yyval.string = yyvsp[-1].string ;;
    break;}
case 155:
#line 551 "parser/mocc.y"
{;
    break;}
case 156:
#line 555 "parser/mocc.y"
{ yyval.declaration = yyvsp[-1].declaration; ;
    break;}
case 157:
#line 559 "parser/mocc.y"
{ yyval.argument_list = newAST_ArgumentList(); ;
    break;}
case 158:
#line 560 "parser/mocc.y"
{ yyval.argument_list = yyvsp[0].argument_list; ;
    break;}
case 159:
#line 564 "parser/mocc.y"
{ yyval.type_prefix = yyvsp[0].type_prefix; ;
    break;}
case 160:
#line 568 "parser/mocc.y"
{ yyval.expression_list = newAST_ExpressionList(yyvsp[0].expression); ;
    break;}
case 161:
#line 569 "parser/mocc.y"
{ yyval.expression_list = AST_ListAppend(yyvsp[-2].expression_list,yyvsp[0].expression); ;
    break;}
case 162:
#line 573 "parser/mocc.y"
{ yyval.expression = newAST_Expression_Colon();;
    break;}
case 163:
#line 574 "parser/mocc.y"
{ yyval.expression = yyvsp[0].expression; ;
    break;}
case 164:
#line 578 "parser/mocc.y"
{ setParsingSubscript(); ;
    break;}
case 165:
#line 578 "parser/mocc.y"
{ unsetParsingSubscript(); yyval.expression_list = yyvsp[-1].expression_list; ;
    break;}
case 166:
#line 582 "parser/mocc.y"
{ yyval.argument_list = newAST_ArgumentList(); ;
    break;}
case 167:
#line 583 "parser/mocc.y"
{ yyval.argument_list = yyvsp[0].argument_list; ;
    break;}
case 168:
#line 587 "parser/mocc.y"
{ yyval.argument_list = yyvsp[0].argument_list; ;
    break;}
case 169:
#line 591 "parser/mocc.y"
{ yyval.composition_eqs_algs = newAST_CompositionInitialEquations(yyvsp[0].equation_list);;
    break;}
case 170:
#line 592 "parser/mocc.y"
{ yyval.composition_eqs_algs = newAST_CompositionEquations(yyvsp[0].equation_list);;
    break;}
case 171:
#line 593 "parser/mocc.y"
{ yyval.composition_eqs_algs = newAST_CompositionInitialAlgorithms(yyvsp[0].statement_list); ;
    break;}
case 172:
#line 594 "parser/mocc.y"
{ yyval.composition_eqs_algs = newAST_CompositionAlgorithms(yyvsp[0].statement_list); ;
    break;}
case 173:
#line 598 "parser/mocc.y"
{ yyval.equation_list = newAST_EquationList(); ;
    break;}
case 174:
#line 599 "parser/mocc.y"
{ yyval.equation_list = AST_ListAppend(yyvsp[-2].equation_list,yyvsp[-1].equation); ;
    break;}
case 175:
#line 603 "parser/mocc.y"
{ yyval.equation = yyvsp[-1].equation; ;
    break;}
case 176:
#line 604 "parser/mocc.y"
{ yyval.equation = yyvsp[-1].equation; ;
    break;}
case 177:
#line 605 "parser/mocc.y"
{ yyval.equation = newAST_Equation_Equality(yyvsp[-3].expression,yyvsp[-1].expression); ;
    break;}
case 178:
#line 606 "parser/mocc.y"
{ yyval.equation = newAST_Equation_Call(yyvsp[0].expression); ;
    break;}
case 179:
#line 607 "parser/mocc.y"
{ yyval.equation = yyvsp[-1].equation; ;
    break;}
case 180:
#line 608 "parser/mocc.y"
{ yyval.equation = yyvsp[-1].equation; ;
    break;}
case 181:
#line 612 "parser/mocc.y"
{ yyval.for_index_list = AST_ListPrepend(yyvsp[0].for_index_list,yyvsp[-1].for_index); ;
    break;}
case 182:
#line 616 "parser/mocc.y"
{ yyval.for_index_list = newAST_ForIndexList(); ;
    break;}
case 183:
#line 617 "parser/mocc.y"
{ yyval.for_index_list = AST_ListAppend(yyvsp[-2].for_index_list,yyvsp[0].for_index); ;
    break;}
case 184:
#line 621 "parser/mocc.y"
{ yyval.for_index = newAST_ForIndex(yyvsp[-1].string,yyvsp[0].expression); ;
    break;}
case 185:
#line 625 "parser/mocc.y"
{ yyval.expression = newAST_Expression_Null();;
    break;}
case 186:
#line 626 "parser/mocc.y"
{ yyval.expression = yyvsp[0].expression; ;
    break;}
case 187:
#line 630 "parser/mocc.y"
{ yyval.equation = newAST_Equation_For(yyvsp[-4].for_index_list,yyvsp[-2].equation_list); ;
    break;}
case 188:
#line 634 "parser/mocc.y"
{ yyval.equation = newAST_Equation_When(yyvsp[-5].expression,yyvsp[-3].equation_list,yyvsp[-2].equation_elselist); ;
    break;}
case 189:
#line 639 "parser/mocc.y"
{ yyval.equation_elselist = newAST_Equation_ElseList(); ;
    break;}
case 190:
#line 640 "parser/mocc.y"
{ yyval.equation_elselist = AST_ListAppend(yyvsp[-4].equation_elselist,newAST_Equation_Else(yyvsp[-2].expression,yyvsp[0].equation_list)); ;
    break;}
case 191:
#line 644 "parser/mocc.y"
{ yyval.equation = newAST_Equation_If(yyvsp[-6].expression,yyvsp[-4].equation_list,yyvsp[-3].equation_elselist,yyvsp[-2].equation_list); ;
    break;}
case 192:
#line 648 "parser/mocc.y"
{ yyval.equation_elselist = newAST_Equation_ElseList(); ;
    break;}
case 193:
#line 649 "parser/mocc.y"
{ yyval.equation_elselist = AST_ListAppend(yyvsp[-4].equation_elselist,newAST_Equation_Else(yyvsp[-2].expression,yyvsp[0].equation_list)); ;
    break;}
case 194:
#line 653 "parser/mocc.y"
{ yyval.equation_list = newAST_EquationList(); ;
    break;}
case 195:
#line 654 "parser/mocc.y"
{ yyval.equation_list = yyvsp[0].equation_list; ;
    break;}
case 196:
#line 658 "parser/mocc.y"
{ yyval.equation = newAST_Equation_Connect(yyvsp[-3].component_ref,yyvsp[-1].component_ref); ;
    break;}
case 197:
#line 662 "parser/mocc.y"
{ yyval.statement_list = newAST_StatementList(); ;
    break;}
case 198:
#line 663 "parser/mocc.y"
{ yyval.statement_list = AST_ListAppend(yyvsp[-2].statement_list,yyvsp[-1].statement); ;
    break;}
case 199:
#line 667 "parser/mocc.y"
{ yyval.statement = newAST_Statement_Assign(yyvsp[-2].component_ref,yyvsp[-1].expression);;
    break;}
case 200:
#line 669 "parser/mocc.y"
{ yyval.statement = newAST_Statement_OutputAssign(yyvsp[-4].expression_list,yyvsp[-1].component_ref,yyvsp[0].expression_list); ;
    break;}
case 201:
#line 670 "parser/mocc.y"
{ yyval.statement = yyvsp[-1].statement; ;
    break;}
case 202:
#line 671 "parser/mocc.y"
{ yyval.statement = yyvsp[0].statement; ;
    break;}
case 203:
#line 672 "parser/mocc.y"
{ yyval.statement = yyvsp[-1].statement; ;
    break;}
case 204:
#line 673 "parser/mocc.y"
{ yyval.statement = yyvsp[-1].statement; ;
    break;}
case 205:
#line 674 "parser/mocc.y"
{ yyval.statement = newAST_Statement_Break(); ;
    break;}
case 206:
#line 675 "parser/mocc.y"
{ yyval.statement = newAST_Statement_Return(); ;
    break;}
case 207:
#line 679 "parser/mocc.y"
{ yyval.statement = newAST_Statement_While(yyvsp[-4].expression,yyvsp[-2].statement_list); ;
    break;}
case 208:
#line 683 "parser/mocc.y"
{ yyval.statement = newAST_Statement_When(yyvsp[-6].expression,yyvsp[-4].statement_list,yyvsp[-3].statement_elselist,yyvsp[0].comment); ;
    break;}
case 209:
#line 687 "parser/mocc.y"
{ yyval.statement_elselist = newAST_Statement_ElseList(); ;
    break;}
case 210:
#line 688 "parser/mocc.y"
{ yyval.statement_elselist = AST_ListAppend(yyvsp[-4].statement_elselist,newAST_Statement_Else(yyvsp[-2].expression,yyvsp[0].statement_list)); ;
    break;}
case 211:
#line 692 "parser/mocc.y"
{ yyval.statement = newAST_Statement_For(yyvsp[-4].for_index_list,yyvsp[-2].statement_list); ;
    break;}
case 212:
#line 696 "parser/mocc.y"
{ yyval.statement = newAST_Statement_If(yyvsp[-6].expression,yyvsp[-4].statement_list,yyvsp[-3].statement_elselist,yyvsp[-2].statement_list); ;
    break;}
case 213:
#line 700 "parser/mocc.y"
{ yyval.statement_elselist = newAST_Statement_ElseList(); ;
    break;}
case 214:
#line 701 "parser/mocc.y"
{ yyval.statement_elselist = AST_ListAppend(yyvsp[-4].statement_elselist,newAST_Statement_Else(yyvsp[-2].expression,yyvsp[0].statement_list)); ;
    break;}
case 215:
#line 705 "parser/mocc.y"
{ yyval.statement_list = newAST_StatementList(); ;
    break;}
case 216:
#line 706 "parser/mocc.y"
{ yyval.statement_list = yyvsp[0].statement_list; ;
    break;}
case 217:
#line 710 "parser/mocc.y"
{ yyval.expression_list = newAST_ExpressionList(); ;
    break;}
case 218:
#line 711 "parser/mocc.y"
{ yyval.expression_list = AST_ListAppend(yyvsp[0].expression_list,yyvsp[-1].expression); ;
    break;}
case 219:
#line 715 "parser/mocc.y"
{ yyval.expression_list = newAST_ExpressionList(); ;
    break;}
case 220:
#line 716 "parser/mocc.y"
{ yyval.expression_list = AST_ListPrepend(yyvsp[0].expression_list,yyvsp[-1].expression); ;
    break;}
case 221:
#line 720 "parser/mocc.y"
{ yyval.expression_list = newAST_ExpressionList(); ;
    break;}
case 222:
#line 721 "parser/mocc.y"
{ yyval.expression_list = yyvsp[0].expression_list; ;
    break;}
case 223:
#line 725 "parser/mocc.y"
{ yyval.expression_list = AST_ListPrepend(yyvsp[0].expression_list,yyvsp[-1].expression); ;
    break;}
case 224:
#line 729 "parser/mocc.y"
{ yyval.expression = newAST_Expression_NamedArgument(yyvsp[-2].string,yyvsp[0].expression); ;
    break;}
case 225:
#line 733 "parser/mocc.y"
{ yyval.expression_list = newAST_ExpressionList(); ;
    break;}
case 226:
#line 734 "parser/mocc.y"
{ yyval.expression_list = yyvsp[0].expression_list; ;
    break;}
case 227:
#line 738 "parser/mocc.y"
{ yyval.expression = yyvsp[0].expression; ;
    break;}
case 228:
#line 739 "parser/mocc.y"
{ yyval.expression= newAST_Expression_FunctionCallArgs(yyvsp[0].expression_list);  ;
    break;}
case 229:
#line 743 "parser/mocc.y"
{ newAST_Expression_Function(yyvsp[-3].string,yyvsp[-1].expression_list); ;
    break;}
case 230:
#line 744 "parser/mocc.y"
{ yyval.expression = yyvsp[0].expression; ;
    break;}
case 231:
#line 748 "parser/mocc.y"
{ yyval.expression_list = yyvsp[-1].expression_list; ;
    break;}
case 232:
#line 752 "parser/mocc.y"
{ yyval.expression_list = newAST_ExpressionList(); ;
    break;}
case 233:
#line 753 "parser/mocc.y"
{ yyval.expression_list = yyvsp[0].expression_list; ;
    break;}
case 234:
#line 757 "parser/mocc.y"
{ yyval.expression_list = AST_ListPrepend(yyvsp[0].expression_list,yyvsp[-1].expression); ;
    break;}
case 235:
#line 758 "parser/mocc.y"
{ yyval.expression_list = AST_ListPrepend(yyvsp[0].expression_list,yyvsp[-1].expression); ;
    break;}
case 236:
#line 762 "parser/mocc.y"
{ yyval.expression_list = newAST_ExpressionList(); ;
    break;}
case 237:
#line 763 "parser/mocc.y"
{ yyval.expression_list = yyvsp[0].expression_list; ;
    break;}
case 238:
#line 764 "parser/mocc.y"
{ yyval.expression_list = newAST_ExpressionList(); /* TODO */ ;
    break;}
case 239:
#line 769 "parser/mocc.y"
{ yyval.expression = yyvsp[0].expression; ;
    break;}
case 240:
#line 770 "parser/mocc.y"
{ yyval.expression = newAST_Expression_OutputExpressions(yyvsp[-1].expression_list); ;
    break;}
case 241:
#line 771 "parser/mocc.y"
{ yyval.expression = newAST_Expression_UnaryMinus(yyvsp[0].expression); ;
    break;}
case 242:
#line 772 "parser/mocc.y"
{ yyval.expression = yyvsp[0].expression; ;
    break;}
case 243:
#line 773 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BooleanNot(yyvsp[0].expression);;
    break;}
case 244:
#line 774 "parser/mocc.y"
{ yyval.expression = newAST_Expression_Range(yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 245:
#line 775 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPLOWER); ;
    break;}
case 246:
#line 776 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPLOWEREQ); ;
    break;}
case 247:
#line 777 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPGREATER); ;
    break;}
case 248:
#line 778 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPGREATEREQ); ;
    break;}
case 249:
#line 779 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPCOMPNE); ;
    break;}
case 250:
#line 780 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPCOMPEQ); ;
    break;}
case 251:
#line 781 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPDIV); ;
    break;}
case 252:
#line 782 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPELDIV); ;
    break;}
case 253:
#line 783 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPMULT); ;
    break;}
case 254:
#line 784 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPELMULT); ;
    break;}
case 255:
#line 785 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPADD); ;
    break;}
case 256:
#line 786 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPSUB); ;
    break;}
case 257:
#line 787 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPELADD); ;
    break;}
case 258:
#line 788 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPELSUB); ;
    break;}
case 259:
#line 789 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPEXP); ;
    break;}
case 260:
#line 790 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPELEXP); ;
    break;}
case 261:
#line 791 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPAND); ;
    break;}
case 262:
#line 792 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPOR); ;
    break;}
case 263:
#line 794 "parser/mocc.y"
{ yyval.expression = newAST_Expression_If(yyvsp[-5].expression,yyvsp[-3].expression,yyvsp[-2].expression_list,yyvsp[0].expression); ;
    break;}
case 264:
#line 798 "parser/mocc.y"
{ yyval.expression = newAST_Expression_Null();;
    break;}
case 265:
#line 799 "parser/mocc.y"
{ yyval.expression = yyvsp[0].expression;;
    break;}
case 266:
#line 803 "parser/mocc.y"
{ yyval.expression_list = newAST_ExpressionList(); ;
    break;}
case 267:
#line 804 "parser/mocc.y"
{ yyval.expression_list = AST_ListAppend(yyvsp[-4].expression_list, newAST_Expression_ElseIf(yyvsp[-2].expression,yyvsp[0].expression)); ;
    break;}
case 268:
#line 808 "parser/mocc.y"
{ yyval.expression = newAST_Expression_Integer(yyvsp[0].integer); ;
    break;}
case 269:
#line 809 "parser/mocc.y"
{ yyval.expression = newAST_Expression_Real(yyvsp[0].real); ;
    break;}
case 270:
#line 810 "parser/mocc.y"
{ yyval.expression = newAST_Expression_String(yyvsp[0].string); ;
    break;}
case 271:
#line 811 "parser/mocc.y"
{ yyval.expression = newAST_Expression_Boolean(false); ;
    break;}
case 272:
#line 812 "parser/mocc.y"
{ yyval.expression = newAST_Expression_Boolean(true); ;
    break;}
case 273:
#line 813 "parser/mocc.y"
{ yyval.expression = newAST_Expression_Derivative(yyvsp[0].expression_list); ;
    break;}
case 274:
#line 814 "parser/mocc.y"
{ yyval.expression = newAST_Expression_Derivative(yyvsp[0].expression_list); ;
    break;}
case 275:
#line 815 "parser/mocc.y"
{ yyval.expression = yyvsp[0].expression; ;
    break;}
case 276:
#line 816 "parser/mocc.y"
{ yyval.expression = newAST_BracketExpList(AST_ListPrepend(yyvsp[-1].expression_list_list,yyvsp[-2].expression_list)); ;
    break;}
case 277:
#line 817 "parser/mocc.y"
{ yyval.expression = newAST_Expression_Brace(yyvsp[-1].expression_list); ;
    break;}
case 278:
#line 818 "parser/mocc.y"
{ yyval.expression = newAST_Expression_End(); ;
    break;}
case 279:
#line 822 "parser/mocc.y"
{ yyval.expression_list_list = newAST_ExpressionListList(); ;
    break;}
case 280:
#line 823 "parser/mocc.y"
{ yyval.expression_list_list = AST_ListAppend(yyvsp[-2].expression_list_list,yyvsp[0].expression_list); ;
    break;}
case 281:
#line 828 "parser/mocc.y"
{ yyval.component_ref = AST_Expression_ComponentReference_Add(yyvsp[0].component_ref,yyvsp[-2].string,yyvsp[-1].expression_list);;
    break;}
case 282:
#line 829 "parser/mocc.y"
{ yyval.component_ref = AST_Expression_ComponentReference_AddDot(yyvsp[0].component_ref,yyvsp[-2].string,yyvsp[-1].expression_list); ;
    break;}
case 283:
#line 833 "parser/mocc.y"
{ yyval.expression_list = newAST_ExpressionList(); ;
    break;}
case 284:
#line 834 "parser/mocc.y"
{ yyval.expression_list = yyvsp[0].expression_list; ;
    break;}
case 285:
#line 838 "parser/mocc.y"
{ yyval.expression_list = AST_ListPrepend(yyvsp[0].expression_list,yyvsp[-1].expression);   ;
    break;}
case 286:
#line 842 "parser/mocc.y"
{ yyval.component_ref = newAST_Expression_ComponentReference(); ;
    break;}
case 287:
#line 843 "parser/mocc.y"
{ yyval.component_ref = AST_Expression_ComponentReference_Add(yyvsp[-3].component_ref,yyvsp[-1].string,yyvsp[0].expression_list); ;
    break;}
case 288:
#line 848 "parser/mocc.y"
{ yyval.expression = yyvsp[0].expression; ;
    break;}
case 289:
#line 849 "parser/mocc.y"
{ yyval.expression = newAST_Expression_OutputExpressions(yyvsp[-1].expression_list); ;
    break;}
case 290:
#line 850 "parser/mocc.y"
{ yyval.expression = newAST_Expression_UnaryMinus(yyvsp[0].expression); ;
    break;}
case 291:
#line 851 "parser/mocc.y"
{ yyval.expression = yyvsp[0].expression; ;
    break;}
case 292:
#line 852 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BooleanNot(yyvsp[0].expression);;
    break;}
case 293:
#line 853 "parser/mocc.y"
{ yyval.expression = newAST_Expression_Range(yyvsp[-2].expression,yyvsp[0].expression); ;
    break;}
case 294:
#line 854 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPLOWER); ;
    break;}
case 295:
#line 855 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPLOWEREQ); ;
    break;}
case 296:
#line 856 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPGREATER); ;
    break;}
case 297:
#line 857 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPGREATEREQ); ;
    break;}
case 298:
#line 858 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPCOMPNE); ;
    break;}
case 299:
#line 859 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPCOMPEQ); ;
    break;}
case 300:
#line 860 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPDIV); ;
    break;}
case 301:
#line 861 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPELDIV); ;
    break;}
case 302:
#line 862 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPMULT); ;
    break;}
case 303:
#line 863 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPELMULT); ;
    break;}
case 304:
#line 864 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPADD); ;
    break;}
case 305:
#line 865 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPSUB); ;
    break;}
case 306:
#line 866 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPELADD); ;
    break;}
case 307:
#line 867 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPELSUB); ;
    break;}
case 308:
#line 868 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPEXP); ;
    break;}
case 309:
#line 869 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPELEXP); ;
    break;}
case 310:
#line 870 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPAND); ;
    break;}
case 311:
#line 871 "parser/mocc.y"
{ yyval.expression = newAST_Expression_BinOp(yyvsp[-2].expression,yyvsp[0].expression,BINOPOR); ;
    break;}
case 312:
#line 875 "parser/mocc.y"
{ yyval.component_ref = newAST_Expression_ComponentReference(); ;
    break;}
case 313:
#line 876 "parser/mocc.y"
{ yyval.component_ref = AST_Expression_ComponentReference_Add(yyvsp[-3].component_ref,yyvsp[-1].string,yyvsp[0].expression_list); ;
    break;}
case 314:
#line 880 "parser/mocc.y"
{ yyval.string = newAST_StringNull(); ;
    break;}
case 315:
#line 881 "parser/mocc.y"
{ yyval.string = AST_StringDotAppend(yyvsp[-2].string,yyvsp[0].string); ;
    break;}
case 316:
#line 885 "parser/mocc.y"
{ yyval.expression = newAST_Expression_ComponentReferenceExpDot(yyvsp[-1].string,yyvsp[0].string); ;
    break;}
case 317:
#line 886 "parser/mocc.y"
{ yyval.expression = newAST_Expression_ComponentReferenceExp(yyvsp[-1].string,yyvsp[0].string); ;
    break;}
case 318:
#line 887 "parser/mocc.y"
{ yyval.expression = AST_Expression_ComponentReferenceExpAddDot(yyvsp[0].component_ref,yyvsp[-3].string,yyvsp[-2].string,yyvsp[-1].expression_list);;
    break;}
case 319:
#line 888 "parser/mocc.y"
{ yyval.expression = AST_Expression_ComponentReferenceExpAdd(yyvsp[0].component_ref,yyvsp[-3].string,yyvsp[-2].string,yyvsp[-1].expression_list);;
    break;}
case 320:
#line 889 "parser/mocc.y"
{ yyval.expression = newAST_Expression_DotCall(yyvsp[-2].string,yyvsp[-1].string,yyvsp[0].expression_list); ;
    break;}
case 321:
#line 890 "parser/mocc.y"
{ yyval.expression = newAST_Expression_Call(yyvsp[-2].string,yyvsp[-1].string,yyvsp[0].expression_list); ;
    break;}
}

#line 839 "/usr/share/bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_MCC_Parser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_MCC_Parser_DEBUG != 0
  if (YY_MCC_Parser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_MCC_Parser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_MCC_Parser_LLOC.first_line;
      yylsp->first_column = YY_MCC_Parser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_MCC_Parser_NERRS;

#ifdef YY_MCC_Parser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_MCC_Parser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_MCC_Parser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_MCC_Parser_ERROR_VERBOSE */
	YY_MCC_Parser_ERROR("parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_MCC_Parser_CHAR == YYEOF)
	YYABORT;

#if YY_MCC_Parser_DEBUG != 0
      if (YY_MCC_Parser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_MCC_Parser_CHAR, yytname[yychar1]);
#endif

      YY_MCC_Parser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_MCC_Parser_LSP_NEEDED
  yylsp--;
#endif

#if YY_MCC_Parser_DEBUG != 0
  if (YY_MCC_Parser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_MCC_Parser_DEBUG != 0
  if (YY_MCC_Parser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_MCC_Parser_LVAL;
#ifdef YY_MCC_Parser_LSP_NEEDED
  *++yylsp = YY_MCC_Parser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "/usr/share/bison++/bison.cc"
#line 892 "parser/mocc.y"
