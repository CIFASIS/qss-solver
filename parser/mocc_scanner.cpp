#line 2 "parser/mocc_scanner.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <fstream>
using std::istream;
using std::ostream;
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif


/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#define FLEX_DEBUG

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 113
#define YY_END_OF_BUFFER 114
static yyconst short int yy_acclist[513] =
    {   0,
       94,   94,  114,  112,  113,   97,  112,  113,   96,  113,
       32,  112,  113,  112,  113,    8,  112,  113,    9,  112,
      113,   21,  112,  113,   19,  112,  113,    5,  112,  113,
       20,  112,  113,   18,  112,  113,   24,  112,  113,   94,
       95,  112,  113,   31,  112,  113,    4,  112,  113,   27,
      112,  113,    3,  112,  113,   29,  112,  113,   93,  112,
      113,   12,  112,  113,   13,  112,  113,    7,  112,  113,
       93,  112,  113,   93,  112,  113,   93,  112,  113,   93,
      112,  113,   93,  112,  113,   93,  112,  113,   93,  112,
      113,   93,  112,  113,   93,  112,  113,   93,  112,  113,

       93,  112,  113,   93,  112,  113,   93,  112,  113,   93,
      112,  113,   93,  112,  113,   93,  112,  113,   10,  112,
      113,   11,  112,  113,   98,  113,  113,  106,  113,  113,
      107,  113,  108,  113,  111,  113,  110,  113,  111,  113,
        1,   16,   14,   15,   17,    6,   22,   23,   95,   94,
       95,   30,   26,   25,    2,   28,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   63,   93,   93,   66,   93,
       93,   93,   93,   93,   73,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   98,  100,  101,

      104,  105,   99,  103,  102,  109,   95,   95,   93,   36,
       93,   93,   93,   93,   93,   93,   45,   93,   93,   93,
       93,   93,   52,   93,   93,   93,   93,   93,   93,   93,
       93,   61,   93,   93,   93,   93,   93,   93,   93,   93,
       71,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   47,   93,
       48,   93,   93,   93,   93,   93,   93,   93,   93,   60,
       93,   93,   93,   93,   93,   93,   93,   69,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   81,   93,

       93,   93,   93,   93,   93,   87,   93,   88,   93,   89,
       93,   90,   93,   93,   93,   93,   93,   38,   93,   39,
       93,   40,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   58,   93,   59,   93,   93,   93,
       93,   93,   67,   93,   68,   93,   70,   93,   93,   74,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   91,   93,   93,   93,   93,   93,   93,   93,
       93,   49,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   64,   93,   65,   93,   93,   93,   75,   93,   93,
       93,   93,   93,   80,   93,   82,   93,   93,   93,   85,

       93,   86,   93,   92,   93,   93,   93,   41,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   56,   93,   93,
       93,   93,   93,   76,   93,   93,   78,   93,   93,   93,
       93,   93,   93,   93,   43,   93,   93,   46,   93,   50,
       93,   93,   93,   54,   93,   93,   57,   93,   62,   93,
       93,   93,   72,   93,   93,   93,   93,   93,   35,   93,
       93,   42,   93,   93,   93,   93,   93,   93,   93,   77,
       93,   79,   93,   83,   93,   93,   37,   93,   93,   93,
       93,   55,   93,   93,   93,   93,   93,   93,   53,   93,
       93,   93,   84,   93,   93,   51,   93,   93,   93,   44,

       93,   93,   93,   93,   93,   93,   33,   93,   33,   34,
       93,   34
    } ;

static yyconst short int yy_accept[392] =
    {   0,
        1,    2,    3,    3,    3,    3,    3,    3,    3,    4,
        6,    9,   11,   14,   16,   19,   22,   25,   28,   31,
       34,   37,   40,   44,   47,   50,   53,   56,   59,   62,
       65,   68,   71,   74,   77,   80,   83,   86,   89,   92,
       95,   98,  101,  104,  107,  110,  113,  116,  119,  122,
      125,  127,  128,  130,  131,  133,  135,  137,  139,  141,
      141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
      152,  152,  153,  154,  155,  156,  157,  158,  159,  160,
      161,  162,  163,  164,  165,  166,  167,  168,  169,  170,
      171,  172,  173,  174,  175,  176,  178,  179,  181,  182,

      183,  184,  185,  187,  188,  189,  190,  191,  192,  193,
      194,  195,  196,  197,  198,  199,  200,  201,  202,  203,
      204,  205,  206,  207,  208,  208,  209,  210,  212,  213,
      214,  215,  216,  217,  219,  220,  221,  222,  223,  225,
      226,  227,  228,  229,  230,  231,  232,  234,  235,  236,
      237,  238,  239,  240,  241,  243,  244,  245,  246,  247,
      248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
      258,  259,  260,  261,  262,  263,  264,  265,  266,  267,
      268,  269,  271,  273,  274,  275,  276,  277,  278,  279,
      280,  282,  283,  284,  285,  286,  287,  288,  290,  291,

      292,  293,  294,  295,  296,  297,  298,  299,  301,  302,
      303,  304,  305,  306,  308,  310,  312,  314,  315,  316,
      317,  318,  320,  322,  324,  325,  326,  327,  328,  329,
      330,  331,  332,  333,  334,  335,  337,  339,  340,  341,
      342,  343,  345,  347,  349,  350,  352,  353,  354,  355,
      356,  357,  358,  359,  360,  361,  362,  363,  365,  366,
      367,  368,  369,  370,  371,  372,  374,  375,  376,  377,
      378,  379,  380,  381,  382,  384,  386,  387,  388,  390,
      391,  392,  393,  394,  396,  398,  399,  400,  402,  404,
      406,  407,  408,  410,  411,  412,  413,  414,  415,  416,

      417,  418,  420,  421,  422,  423,  424,  426,  427,  429,
      430,  431,  432,  433,  434,  435,  437,  438,  440,  442,
      443,  444,  446,  447,  449,  451,  451,  452,  453,  455,
      456,  457,  458,  459,  461,  462,  464,  465,  466,  467,
      468,  468,  468,  469,  470,  472,  474,  476,  477,  479,
      480,  481,  482,  484,  484,  484,  485,  486,  487,  488,
      489,  491,  491,  491,  492,  493,  495,  496,  498,  498,
      498,  499,  500,  502,  502,  502,  503,  504,  504,  504,
      505,  506,  506,  506,  507,  509,  509,  510,  512,  513,
      513

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,   18,   19,
       20,   21,    1,    1,   22,   22,   22,   22,   23,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       24,   25,   26,   27,   22,    1,   28,   29,   30,   31,

       32,   33,   34,   35,   36,   22,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   22,   48,   49,
       50,   22,   51,    1,   52,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[53] =
    {   0,
        1,    1,    2,    1,    2,    3,    3,    1,    1,    1,
        1,    1,    3,    1,    1,    4,    1,    1,    1,    1,
        1,    4,    4,    1,    2,    1,    1,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        1,    1
    } ;

static yyconst short int yy_base[397] =
    {   0,
        0,    0,   50,   51,  424,  423,   54,   55,  425,  428,
      428,  428,  428,  417,  428,  428,  428,  428,  428,  428,
       56,   53,   56,  403,  428,   39,  402,  401,    0,  428,
      428,  428,   40,   43,   36,   50,   56,   57,   67,  379,
      378,  377,   66,   45,  385,  370,   67,   26,  428,  428,
        0,  428,  428,   96,  428,  428,  428,  428,  400,  407,
      428,  428,  428,  428,  428,  428,  428,  428,   96,  100,
      111,  428,  428,  428,  428,  428,    0,  379,   78,  371,
      379,  382,  369,  364,  362,  376,  360,  100,  357,   91,
      365,  362,  360,  356,  359,    0,  356,   99,  356,  365,

      349,  362,    0,  347,   90,  351,  109,  113,  347,  358,
      342,  346,  113,  341,    0,  428,  428,  428,  428,  428,
      428,  428,  428,  134,  370,  369,  343,    0,  342,  352,
      353,  335,  106,    0,  349,  343,  345,  348,    0,  336,
      346,  345,  340,  326,  342,  321,    0,  338,   50,  321,
      334,  318,  322,  331,    0,  318,  116,  324,  124,  314,
      321,  326,  316,  324,  317,  307,  321,  312,  319,  318,
      309,  310,  312,  302,  299,  307,  306,  297,  309,  294,
      295,    0,   67,  296,  305,  290,  295,  116,  302,  295,
        0,  286,  287,  286,  293,  284,  281,    0,  288,  297,

      280,  276,  294,  282,  284,  287,  282,    0,  273,  286,
      287,  270,  285,    0,    0,    0,    0,  280,  275,  274,
      281,    0,    0,    0,  278,  133,  275,  273,  270,  259,
      259,  266,  270,  269,  259,    0,    0,  262,  251,  264,
      267,    0,    0,    0,  248,    0,  247,  258,  259,  262,
      259,  258,  256,  248,  255,  244,  244,    0,  242,  235,
      234,  233,  238,  249,  230,    0,  243,  227,  245,  231,
      243,  225,  241,  227,    0,    0,  229,  225,    0,  233,
      218,  225,  216,    0,    0,  233,  228,    0,    0,    0,
      224,  222,  216,  210,  219,  222,  213,  214,  205,  210,

      220,    0,  210,  207,  160,  202,    0,  213,    0,  212,
      199,  214,  202,  199,  195,    0,  198,    0,    0,  209,
      200,    0,  197,    0,    0,  162,  196,  190,    0,  188,
      200,  198,  200,    0,  188,    0,  195,  180,  184,  192,
      185,  179,  187,  173,    0,    0,    0,  181,    0,  187,
      185,  176,    0,  181,  167,  172,  182,  161,  162,  158,
        0,  146,  158,  141,  138,    0,  133,    0,  138,  135,
      144,  143,    0,  142,  140,  129,  133,  127,  131,  136,
      129,  133,  127,  115,    0,   87,  428,    0,  428,  428,
      194,  198,  202,  204,   86,  208

    } ;

static yyconst short int yy_def[397] =
    {   0,
      390,    1,  391,  391,  392,  392,  393,  393,  390,  390,
      390,  390,  390,  394,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  395,  390,
      390,  390,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  390,  390,
      396,  390,  390,  390,  390,  390,  390,  390,  390,  394,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,

      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  396,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,

      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,

      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  390,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      390,  390,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  390,  390,  395,  395,  395,  395,  395,
      395,  390,  390,  395,  395,  395,  395,  395,  390,  390,
      395,  395,  395,  390,  390,  395,  395,  390,  390,  395,
      395,  390,  390,  395,  395,  390,  390,  395,  390,    0,
      390,  390,  390,  390,  390,  390

    } ;

static yyconst short int yy_nxt[481] =
    {   0,
       10,   11,   12,   11,   13,   10,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   29,   30,   10,   31,   32,   33,   34,   35,
       36,   37,   38,   29,   29,   39,   29,   40,   41,   42,
       43,   44,   29,   45,   46,   47,   29,   48,   29,   29,
       49,   50,   52,   52,   53,   53,   58,   58,   73,   74,
      113,  114,   67,   59,   59,   62,   63,   68,   64,   69,
       65,   70,  105,   82,   54,   54,   83,   78,   71,   79,
       80,   84,   66,   86,   91,   85,   81,   71,  106,   77,
      193,  107,   92,   87,   93,   88,  194,   94,   89,   96,

      116,  110,  228,   95,   90,   97,   98,  102,  128,  103,
      111,  124,  104,   69,  229,   70,  112,  129,   71,  158,
      117,  125,   71,  125,  118,  389,  126,   71,  119,  138,
      139,   71,  142,  159,  150,  120,  143,  161,  151,  121,
      152,  122,  163,  164,  171,  179,  140,  201,  172,  124,
      180,  204,  162,  388,  165,  234,   71,  202,  166,  235,
      263,  326,  326,  326,  326,   71,  387,  386,  385,  205,
      384,  383,  382,  381,  380,  379,  264,  378,  377,  376,
      375,  374,  373,  372,  371,  370,  369,  327,  368,  341,
      367,  328,  366,  342,   51,   51,   51,   51,   55,   55,

       55,   55,   57,   57,   57,   57,   60,   60,  115,  365,
      115,  115,  364,  363,  362,  361,  360,  359,  358,  357,
      356,  355,  354,  353,  352,  351,  350,  349,  348,  347,
      346,  345,  344,  343,  340,  339,  338,  337,  336,  335,
      334,  333,  332,  331,  330,  329,  325,  324,  323,  322,
      321,  320,  319,  318,  317,  316,  315,  314,  313,  312,
      311,  310,  309,  308,  307,  306,  305,  304,  303,  302,
      301,  300,  299,  298,  297,  296,  295,  294,  293,  292,
      291,  290,  289,  288,  287,  286,  285,  284,  283,  282,
      281,  280,  279,  278,  277,  276,  275,  274,  273,  272,

      271,  270,  269,  268,  267,  266,  265,  262,  261,  260,
      259,  258,  257,  256,  255,  254,  253,  252,  251,  250,
      249,  248,  247,  246,  245,  244,  243,  242,  241,  240,
      239,  238,  237,  236,  233,  232,  231,  230,  227,  226,
      225,  224,  223,  222,  221,  220,  219,  218,  217,  216,
      215,  214,  213,  212,  211,  210,  209,  208,  207,  206,
      203,  200,  199,  198,  197,  196,  195,  192,  191,  190,
      189,  188,  187,  186,  185,  184,  183,  182,  181,  178,
      177,  176,  175,  174,  126,  126,  173,  170,  169,  168,
      167,  160,  157,  156,  155,  154,  153,  149,  148,  147,

      146,  145,  144,  141,  137,  136,  135,  134,  133,  132,
      131,  130,  127,   61,  123,  109,  108,  101,  100,   99,
       76,   75,   72,   61,  390,   56,   56,    9,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390
    } ;

static yyconst short int yy_chk[481] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,    3,    4,    7,    8,   26,   26,
       48,   48,   22,    7,    8,   21,   21,   22,   21,   23,
       21,   23,   44,   35,    3,    4,   35,   33,   23,   33,
       34,   36,   21,   37,   38,   36,   34,   23,   44,  395,
      149,   44,   38,   37,   38,   37,  149,   38,   37,   39,

       54,   47,  183,   38,   37,   39,   39,   43,   79,   43,
       47,   69,   43,   70,  183,   70,   47,   79,   69,  105,
       54,   71,   70,   71,   54,  386,   71,   69,   54,   88,
       88,   70,   90,  105,   98,   54,   90,  107,   98,   54,
       98,   54,  108,  108,  113,  133,   88,  157,  113,  124,
      133,  159,  107,  384,  108,  188,  124,  157,  108,  188,
      226,  305,  305,  326,  326,  124,  383,  382,  381,  159,
      380,  379,  378,  377,  376,  375,  226,  374,  372,  371,
      370,  369,  367,  365,  364,  363,  362,  305,  360,  326,
      359,  305,  358,  326,  391,  391,  391,  391,  392,  392,

      392,  392,  393,  393,  393,  393,  394,  394,  396,  357,
      396,  396,  356,  355,  354,  352,  351,  350,  348,  344,
      343,  342,  341,  340,  339,  338,  337,  335,  333,  332,
      331,  330,  328,  327,  323,  321,  320,  317,  315,  314,
      313,  312,  311,  310,  308,  306,  304,  303,  301,  300,
      299,  298,  297,  296,  295,  294,  293,  292,  291,  287,
      286,  283,  282,  281,  280,  278,  277,  274,  273,  272,
      271,  270,  269,  268,  267,  265,  264,  263,  262,  261,
      260,  259,  257,  256,  255,  254,  253,  252,  251,  250,
      249,  248,  247,  245,  241,  240,  239,  238,  235,  234,

      233,  232,  231,  230,  229,  228,  227,  225,  221,  220,
      219,  218,  213,  212,  211,  210,  209,  207,  206,  205,
      204,  203,  202,  201,  200,  199,  197,  196,  195,  194,
      193,  192,  190,  189,  187,  186,  185,  184,  181,  180,
      179,  178,  177,  176,  175,  174,  173,  172,  171,  170,
      169,  168,  167,  166,  165,  164,  163,  162,  161,  160,
      158,  156,  154,  153,  152,  151,  150,  148,  146,  145,
      144,  143,  142,  141,  140,  138,  137,  136,  135,  132,
      131,  130,  129,  127,  126,  125,  114,  112,  111,  110,
      109,  106,  104,  102,  101,  100,   99,   97,   95,   94,

       93,   92,   91,   89,   87,   86,   85,   84,   83,   82,
       81,   80,   78,   60,   59,   46,   45,   42,   41,   40,
       28,   27,   24,   14,    9,    6,    5,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390
    } ;

static yyconst short int yy_rule_linenum[113] =
    {   0,
       37,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   79,   80,   82,   83,   84,   86,   87,   88,
       89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
       99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
      109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
      119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
      129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
      139,  140,  143,  151,  160,  168,  173,  176,  182,  184,

      185,  186,  187,  188,  189,  191,  199,  200,  203,  204,
      205,  206
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "parser/mocc.lex"
#define INITIAL 0
#line 2 "parser/mocc.lex"
#include <FlexLexer.h>
#include <iostream>
#include <stdlib.h>

#include "config.h"
#include <parser/mocc_parser.h>

#ifdef MCC_Lexer_DEBUG
#define TOK(X) printf("TOK%s ",#X);return MCC_Parser::TOK##X;
#else
#define TOK(X) return MCC_Parser::TOK##X;
#endif

#define parser (dynamic_cast<MCC_Lexer*>(this)->parser())
#define YYText (dynamic_cast<MCC_Lexer*>(this)->YYText())

char string_buf[MAX_STR_CONST];
char *string_buf_ptr;

#define str 1

#define line_comment 2
 
#define block_comment 3
 
#line 679 "parser/mocc_scanner.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 35 "parser/mocc.lex"


#line 809 "parser/mocc_scanner.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 391 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 428 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */

		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				cerr << "--scanner backing up\n";
			else if ( yy_act < 113 )
				cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 113 )
				cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 114 )
				cerr << "--(end of buffer or a NUL)\n";
			else
				cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 37 "parser/mocc.lex"
{
#ifdef MCC_Lexer_DEBUG
  printf("TOKID(%s) ",YYText);
#endif
  parser->yylval.string = new string(YYText); 
  return MCC_Parser::TOKID;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "parser/mocc.lex"
TOK(COMPEQ);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 47 "parser/mocc.lex"
TOK(EQUAL);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 48 "parser/mocc.lex"
TOK(SEMICOLON);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 49 "parser/mocc.lex"
TOK(COMA);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 50 "parser/mocc.lex"
TOK(DOTCARET);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 51 "parser/mocc.lex"
TOK(CARET);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 52 "parser/mocc.lex"
TOK(OPAREN);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 53 "parser/mocc.lex"
TOK(CPAREN);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 54 "parser/mocc.lex"
TOK(OBRACE);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 55 "parser/mocc.lex"
TOK(CBRACE);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 56 "parser/mocc.lex"
TOK(OBRACKET);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 57 "parser/mocc.lex"
TOK(CBRACKET);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 58 "parser/mocc.lex"
TOK(DOTPLUS);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 59 "parser/mocc.lex"
TOK(DOTMINUS);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 60 "parser/mocc.lex"
TOK(DOTSTAR);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 61 "parser/mocc.lex"
TOK(DOTSLASH);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 62 "parser/mocc.lex"
TOK(DOT);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 63 "parser/mocc.lex"
TOK(PLUS);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 64 "parser/mocc.lex"
TOK(MINUS);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 65 "parser/mocc.lex"
TOK(STAR);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 66 "parser/mocc.lex"
BEGIN(block_comment);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 67 "parser/mocc.lex"
BEGIN(line_comment);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 68 "parser/mocc.lex"
TOK(SLASH);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 69 "parser/mocc.lex"
TOK(COMPNE);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 70 "parser/mocc.lex"
TOK(LOWEREQ);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 71 "parser/mocc.lex"
TOK(LOWER);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 72 "parser/mocc.lex"
TOK(GREATEREQ);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 73 "parser/mocc.lex"
TOK(GREATER);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 74 "parser/mocc.lex"
TOK(ASSING);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 75 "parser/mocc.lex"
TOK(COLON);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 76 "parser/mocc.lex"
string_buf_ptr=string_buf;memset(string_buf,'\0',MAX_STR_CONST);BEGIN(str);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 79 "parser/mocc.lex"
TOK(INITIALEQ);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 80 "parser/mocc.lex"
TOK(INITIALALG);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 82 "parser/mocc.lex"
TOK(ALGORITHM);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 83 "parser/mocc.lex"
TOK(AND);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 84 "parser/mocc.lex"
TOK(ANNOTATION);	
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 86 "parser/mocc.lex"
TOK(BLOCK);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 87 "parser/mocc.lex"
TOK(BREAK);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 88 "parser/mocc.lex"
TOK(CLASS);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 89 "parser/mocc.lex"
TOK(CONNECT);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 90 "parser/mocc.lex"
TOK(CONNECTOR);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 91 "parser/mocc.lex"
TOK(CONSTANT);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 92 "parser/mocc.lex"
TOK(CONSTRAINEDBY);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 93 "parser/mocc.lex"
TOK(DER);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 94 "parser/mocc.lex"
TOK(DISCRETE);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 95 "parser/mocc.lex"
TOK(EACH);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 96 "parser/mocc.lex"
TOK(ELSE);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 97 "parser/mocc.lex"
TOK(ELSEIF);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 98 "parser/mocc.lex"
TOK(ELSEWHEN);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 99 "parser/mocc.lex"
TOK(ENCAPSULATED);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 100 "parser/mocc.lex"
{ if (parser->isParsingSubscript()) { TOK(ENDSUB) } else { TOK(END);} }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 101 "parser/mocc.lex"
TOK(ENUMERATION);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 102 "parser/mocc.lex"
TOK(EQUATION);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 103 "parser/mocc.lex"
TOK(EXPANDABLE);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 104 "parser/mocc.lex"
TOK(EXTENDS);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 105 "parser/mocc.lex"
TOK(EXTERNAL);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 106 "parser/mocc.lex"
TOK(FALSE);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 107 "parser/mocc.lex"
TOK(FINAL);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 108 "parser/mocc.lex"
TOK(FLOW);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 109 "parser/mocc.lex"
TOK(FOR);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 110 "parser/mocc.lex"
TOK(FUNCTION);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 111 "parser/mocc.lex"
TOK(IF);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 112 "parser/mocc.lex"
TOK(IMPORT);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 113 "parser/mocc.lex"
TOK(IMPURE);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 114 "parser/mocc.lex"
TOK(IN);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 115 "parser/mocc.lex"
TOK(INNER);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 116 "parser/mocc.lex"
TOK(INPUT);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 117 "parser/mocc.lex"
TOK(LOOP);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 118 "parser/mocc.lex"
TOK(MODEL);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 119 "parser/mocc.lex"
TOK(NOT);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 120 "parser/mocc.lex"
TOK(OPERATOR);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 121 "parser/mocc.lex"
TOK(OR);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 122 "parser/mocc.lex"
TOK(OUTER);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 123 "parser/mocc.lex"
TOK(OUTPUT);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 124 "parser/mocc.lex"
TOK(PACKAGE);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 125 "parser/mocc.lex"
TOK(PARAMETER);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 126 "parser/mocc.lex"
TOK(PARTIAL);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 127 "parser/mocc.lex"
TOK(PROTECTED);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 128 "parser/mocc.lex"
TOK(PUBLIC);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 129 "parser/mocc.lex"
TOK(PURE);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 130 "parser/mocc.lex"
TOK(RECORD);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 131 "parser/mocc.lex"
TOK(REDECLARE);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 132 "parser/mocc.lex"
TOK(REPLACEABLE);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 133 "parser/mocc.lex"
TOK(RETURN);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 134 "parser/mocc.lex"
TOK(STREAM);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 135 "parser/mocc.lex"
TOK(THEN);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 136 "parser/mocc.lex"
TOK(TRUE);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 137 "parser/mocc.lex"
TOK(TYPE);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 138 "parser/mocc.lex"
TOK(WHEN);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 139 "parser/mocc.lex"
TOK(WHILE);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 140 "parser/mocc.lex"
TOK(WITHIN);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 143 "parser/mocc.lex"
{
#ifdef MCC_Lexer_DEBUG
  printf("TOKID(%s) ",YYText);
#endif
  parser->yylval.string = new string(YYText); 
  return MCC_Parser::TOKID;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 151 "parser/mocc.lex"
{
#ifdef MCC_Lexer_DEBUG
  printf("TOKINT(%d) ",atoi(yytext));
#endif
  parser->yylval.integer = atoi(yytext);
  return MCC_Parser::TOKINT;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 160 "parser/mocc.lex"
{ 
#ifdef MCC_Lexer_DEBUG
  printf("TOKFLOAT(%s)",yytext);
#endif
  parser->yylval.real = atof(yytext);
  return MCC_Parser::TOKFLOAT;
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 168 "parser/mocc.lex"
{
#ifdef MCC_Lexer_DEBUG
printf("\n");
#endif
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 173 "parser/mocc.lex"

	YY_BREAK
case 98:
YY_RULE_SETUP
#line 176 "parser/mocc.lex"
{
  char *yptr = yytext;
  while ( *yptr )
    *string_buf_ptr++ = *yptr++;
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 182 "parser/mocc.lex"
*string_buf_ptr++='\\'; *string_buf_ptr++='n';  // a quoted "\n"
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 184 "parser/mocc.lex"
*string_buf_ptr++='"';
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 185 "parser/mocc.lex"
*string_buf_ptr++='\\';
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 186 "parser/mocc.lex"
*string_buf_ptr++ = '\t';
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 187 "parser/mocc.lex"
*string_buf_ptr++ = '\r';
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 188 "parser/mocc.lex"
*string_buf_ptr++ = '\b';
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 189 "parser/mocc.lex"
*string_buf_ptr++ = '\f';
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 191 "parser/mocc.lex"
{ 
  string_buf_ptr=0; 
#ifdef MCC_Lexer_DEBUG
  printf("TSTRING(%s) ",string_buf);
#endif
BEGIN(INITIAL); parser->yylval.string=new string(string_buf);return MCC_Parser::TOKSTRING;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 199 "parser/mocc.lex"

	YY_BREAK
case 108:
YY_RULE_SETUP
#line 200 "parser/mocc.lex"
BEGIN(INITIAL);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 203 "parser/mocc.lex"
BEGIN(INITIAL);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 204 "parser/mocc.lex"

	YY_BREAK
case 111:
YY_RULE_SETUP
#line 205 "parser/mocc.lex"

	YY_BREAK
case 112:
YY_RULE_SETUP
#line 206 "parser/mocc.lex"
printf("Unrecognized token: '%s' at line %d\n",yytext,parser->lineno());
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 207 "parser/mocc.lex"
ECHO;
	YY_BREAK
#line 1517 "parser/mocc_scanner.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(str):
			case YY_STATE_EOF(line_comment):
			case YY_STATE_EOF(block_comment):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 391 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 391 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 390);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 207 "parser/mocc.lex"


