model microgrid
  import fede;
  constant Integer N =10;   /*Number of zones*/
  /* Zone parameters */
  parameter Real Cza = 6092000.0;  /*Zone thermal capacity [J/K]*/
  parameter Real kout = 462.5;    /* "Zone thermal conductance towards the outside [W/K]" */
  /* Thermostat parameters */
  parameter Real kiz = 0.0005;    /*"Zone temperature controller integral gain [1/K.s]" */
  parameter Real kpz = 1;  /*"Zone controller proportional gain [1/K]"*/
  /* Chilled water circuit parameters */
  parameter Real Ccw = (10418000.0 + 3.334 * 1000000.0) * N;   /*"Thermal circuit heat capacity" */
  parameter Real kcw = 263.391; /* "Thermal conductance between chilled water and zone"; */
  parameter Real Tcwsp = 10;  /* "Chilled water temperature set point"; */
  /* Chilled water circuit controller */
  parameter Real kicw = 0.5 * N;  /* "Chilled temperature controller integral gain [W/Ks]"; */
  parameter Real kpcw = 6000 * N; /* "Chilled temperature controller proportional gain [W/K]"; */
  /* Chiller plant */
  parameter Real Qcmax = 3000 * N;    /* "Chiller heat capacity [W]";*/
  /* Parameters to compute the heat generated by people */
  parameter Real p1 = -0.2199,p2 = 5.0597,p3 = 84.9168;
  /* Zone setpoint */
  parameter Real Tzasp = 23;  /* "Zone temperature set point";  */
  /* Chillers */
  Real Tcw(start = Tcwsp);  /*"Chilled water temperature"; */
  Real Qcsp;    /* "Chiller power set point (= actual value) [W]";*/
  Real ecw;   /* "Chiller temperature error";*/
  Real zcw(start = 0);   /*"State variable of the PI chiller temperature";*/
  /* Ambient temperature */
  Real Toa; /* "Ambient temperature"*/
  /* Zones */
  Real Tza[N](each start = 23); /* "Zone temperature";*/

  Real Xc[N];   /* "Valve openings";*/
  Real zc[N](each start = 0); /* "State variable of the PI zone temperature controller";*/
  Real Qint[N]; /* "Heat generated by the people inside the zone [W]"; */
  discrete Real npeople[N]; /* "Number of people in each zone"; */
  discrete Real nextPeople[N];  /* "Time of next number of people change"; */
  Real Qza[N](each start = 0);  /* "Thermal power transferred from chilled water to each zone"; */
  discrete Real z_0,z_1,z_2[N],z_3[N];  /* "Discrete variables to describe saturations"; */

initial algorithm
  for i in 1:N loop
    npeople[i]:=get_npeople_qss(i);
    	nextPeople[i]:=get_nextpeople_qss(i);
  end for;

equation
  /* Ambient temperature */
   Toa = 26 + 4 * sin(time / 3600 / 24 * 6.28) + 1e-20*Tza[N];
    /* Chilled water circuit model */
  /* Rooms temparture contoller */
  for i in 1:N loop
  der(zc[i]) = -kiz / kpz * zc[i] + kiz / kpz * (pre(z_3[i]) * 1 + (1 - pre(z_3[i])) * (pre(z_2[i]) * 0 + (1 - pre(z_2[i])) * (kpz * (Tza[i] - Tzasp) + zc[i])));
  Xc[i] = pre(z_3[i])*1+(1-pre(z_3[i]))*(pre(z_2[i])*0+(1-pre(z_2[i]))*(kpz*(Tza[i] - Tzasp )+zc[i]));
  der(Qza[i]) = Xc[i] * kcw * (Tza[i] - Tcw) - Qza[i];
  Qint[i] = (p1 * Tza[i] ^ 2 + p2 * Tza[i] + p3) * npeople[i];
  der(Tza[i]) = (-Qza[i] + kout * (Toa - Tza[i]) + Qint[i]) / Cza;
  end for;

  ecw = Tcw - Tcwsp;
  Qcsp = z_0 * 0.0 + (1 - z_0) * (z_1 * Qcmax + (1 - z_1) * (kpcw * (Tcw - Tcwsp) + zcw));
  der(zcw) = kicw / kpcw * (Qcsp - zcw);
  der(Tcw) = (sum(Qza) - Qcsp) / Ccw;
//  der(Tcw) = (Qza[1]+Qza[2]+Qza[3]+Qza[4]+Qza[5]+Qza[6]+Qza[7]+Qza[8]+Qza[9]+Qza[10]+-Qcsp)/Ccw;
algorithm
  for i in 1:N loop
      when time > nextPeople[i] then
        npeople[i]:=get_npeople_qss(i);
        nextPeople[i]:=time+get_nextpeople_qss(i);
    end when;
  end for;
  for i in 1:N loop
      when kpz * (Tza[i] - Tzasp) + zc[i] < 0 then
          z_2[i]:=1;    elsewhen kpz * (Tza[i] - Tzasp) + zc[i] >= 0 then
      z_2[i]:=0;
    end when;
  end for;
  for i in 1:N loop
      when kpz * (Tza[i] - Tzasp) + zc[i] > 1 then
          z_3[i]:=1;    elsewhen kpz * (Tza[i] - Tzasp) + zc[i] <= 1 then
      z_3[i]:=0;
    end when;
  end for;
  when kpcw * (Tcw - Tcwsp) + zcw < 0 then
      z_0:=1;  elsewhen kpcw * (Tcw - Tcwsp) + zcw >= 0 then
    z_0:=0;
  end when;
  when kpcw * (Tcw - Tcwsp) + zcw > Qcmax then
      z_1:=1;  elsewhen kpcw * (Tcw - Tcwsp) + zcw <= Qcmax then
    z_1:=0;
  end when;
	annotation(

	experiment(
		MMO_Description=" ",
		MMO_Solver=LIQSS2,
		MMO_Period={360000/5000},
		MMO_Output={Tza[N]},
		MMO_OutputType=CI_Sampled,
		StartTime= 0.0,
		StopTime= 360000,
		Tolerance={2e-4},
		AbsTolerance={2e-4}
	));
end microgrid;
